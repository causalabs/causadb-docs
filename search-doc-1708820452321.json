{"searchDocs":[{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":"","version":null},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":"","version":null},{"title":"Understanding customer intent","type":0,"sectionRef":"#","url":"/docs/examples/use-cases/customer_intent","content":"","keywords":"","version":"Next"},{"title":"Recommending health and lifestyle interventions","type":0,"sectionRef":"#","url":"/docs/examples/use-cases/lifestyle","content":"","keywords":"","version":"Next"},{"title":"Scenario​","type":1,"pageTitle":"Recommending health and lifestyle interventions","url":"/docs/examples/use-cases/lifestyle#scenario","content":" To keep things simple we'll consider a case where a user's goal is to reduce their BMI by changing the percentage of saturated fats in their diet. Data collected from previous users and/or medical records is available, and takes the form:  UserID\tSaturatedFatsInDiet (%)\tWeight (kg)\tBMI (kg/m²)U001\t12\t70\t22.5 U002\t7\t65\t21.0 U003\t15\t80\t25.5 U004\t10\t75\t23.8 U005\t5\t60\t20.3  UserID: A unique identifier for each user in the dataset.SaturatedFatsInDiet (%): The percentage of saturated fats in the user's diet.Weight (kg): The weight of the user in kilograms.BMI (kg/m²): The Body Mass Index of the user, calculated as weight in kilograms divided by the square of height in meters.  ","version":"Next","tagName":"h2"},{"title":"What's wrong with standard AI?​","type":1,"pageTitle":"Recommending health and lifestyle interventions","url":"/docs/examples/use-cases/lifestyle#whats-wrong-with-standard-ai","content":" Our goal is to help a user achieve their desired BMI by reducing the amount of saturated fats in their diet. A standard AI approach would be to train a model to predict BMI based on the available variables, and then use that model to find the ideal percentage of saturated fats in the diet that achieves the desired BMI. However this approach is flawed because by including all variables, some of the important causal pathways can become &quot;blocked&quot;. In this example, including the weight variable in the AI model means that changes in saturated fat intake can't change weight, and in turn won't affect BMI. This is where causal AI is needed.  ","version":"Next","tagName":"h2"},{"title":"Set up CausaDB​","type":1,"pageTitle":"Recommending health and lifestyle interventions","url":"/docs/examples/use-cases/lifestyle#set-up-causadb","content":" CausaDB can be initialised and the dataset can be attached in the usual way:  const causadb = require('causadb'); causadb.setToken(&quot;&lt;YOUR_API_KEY&gt;&quot;); const model = causadb.createModel(&quot;bmi&quot;); model.attachDataFromDB(&quot;bmi_db&quot;);   If you don't already have an API key, get in touch to set one up.  ","version":"Next","tagName":"h2"},{"title":"Fitting the causal model​","type":1,"pageTitle":"Recommending health and lifestyle interventions","url":"/docs/examples/use-cases/lifestyle#fitting-the-causal-model","content":" Now we've initialised CausaDB and created our model instance, we need to define the causal model with the relevant variables and their relationships. This means specifying the input features and the causal relationships between them. We'll define these manually in this example, but there are also automated and semi-automated approaches that we explore in other examples. This only needs to be done once when first setting up the model or when updating it.  ","version":"Next","tagName":"h2"},{"title":"Defining the Causal Relationships​","type":1,"pageTitle":"Recommending health and lifestyle interventions","url":"/docs/examples/use-cases/lifestyle#defining-the-causal-relationships","content":" The causal model in CausaDB allows us to incorporate domain knowledge about potential causal relationships between variables. In our case, we have:  We have SaturatedFatsInDiet as a potential cause of a user's Weight as well as Weight as an intermediary variable which affects BMI. This can be defined in CausaDB using:  model.setNodes([&quot;SaturatedFatsInDiet&quot;, &quot;Weight&quot;, &quot;BMI&quot;]); model.setEdges([ (&quot;SaturatedFatsInDiet&quot;, &quot;Weight&quot;), (&quot;Weight&quot;, &quot;BMI&quot;), ]);   In this setup, we define the nodes and edges in our causal model. The edges represent the hypothesized causal relationships, such as the influence of saturated fat intake on weight, and subsequently on BMI. This model will help us understand and quantify the effects of dietary habits on overall health outcomes.  ","version":"Next","tagName":"h3"},{"title":"Running training​","type":1,"pageTitle":"Recommending health and lifestyle interventions","url":"/docs/examples/use-cases/lifestyle#running-training","content":" After defining the variables and their causal relationships, we can fit the model to our dataset. This process takes place on the CausaDB cloud and for a small dataset with a few columns (like our example), should take less than a second.  model.train();   With the train method, the model learns from the historical data in our dataset. This training process allows CausaDB to understand how different variables interact causally and how interventions on diet can influence the weight and BMI of a user. This also makes the model ready for production, and it can now be queried to make recommendations within a health app to help users make informed decisions about their lifestyle choices.  ","version":"Next","tagName":"h3"},{"title":"Using the model in production to make recommendations​","type":1,"pageTitle":"Recommending health and lifestyle interventions","url":"/docs/examples/use-cases/lifestyle#using-the-model-in-production-to-make-recommendations","content":" CausaDB is cloud-first, so once training is complete, the model is already available in production. This means that from a NodeJS server that handles API calls from your frontend, you can simply connect to CausaDB as we did earlier, retrieve the model, and then run the query needed for your application. We'll retrieve the model using:  const model = CausaDB.getModel(&quot;bmi&quot;);   This will pull in the model from your CausaDB model database ready for querying. In our use case, the goal is to give a user access to a slider that they can adjust to see how changing their saturated fat intake will impact their BMI. For this, we can use CausaDB's simulated actions functionality. At the NodeJS server for the app, we'll assume the user's slider value request is available as sliderValue:  const actionOutcome = model.simulateAction({'SaturatedFatsInDiet': sliderValue});   The NodeJS server can then respond with the expected outcome using actionOutcome.BMI.  ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Recommending health and lifestyle interventions","url":"/docs/examples/use-cases/lifestyle#conclusion","content":" This case study highlights the potential of CausaDB in the realm of personalized health and lifestyle recommendations. By using causal AI, we avoid the limitations and pitfalls of traditional predictive models, enabling us to understand and act upon the complex relationships between variables. The future of AI in healthcare and beyond lies in the ability to not just predict, but to understand and influence outcomes in a responsible and informed manner. ","version":"Next","tagName":"h2"},{"title":"Scenario​","type":1,"pageTitle":"Understanding customer intent","url":"/docs/examples/use-cases/customer_intent#scenario","content":" Our retail business has a wealth of data on customer interactions, including whether a user has viewed similar items, purchased similar items, and whether they were previously offered a discount. These input variables will often be causally related, so its important to use causal AI and not conventional AI to understand how to optimise discounting strategies. In this example we'll predict the likelihood of a user making a purchase if offered a discount, thereby optimizing our marketing strategies and improving sales efficiency.  ","version":"Next","tagName":"h2"},{"title":"Dataset​","type":1,"pageTitle":"Understanding customer intent","url":"/docs/examples/use-cases/customer_intent#dataset","content":" For this example we'll use a synthetic dataset that looks something like this:  UserID\tViewedSimilarItem\tBoughtSimilarItem\tOfferedDiscount\tBoughtItem101\t1\t0\t0\t0 102\t0\t1\t1\t1 103\t1\t0\t1\t0 104\t0\t1\t0\t1 105\t1\t1\t1\t1  UserID: A unique identifier for each user in the dataset.ViewedSimilarItem: Indicates whether the user has viewed a similar item.BoughtSimilarItem: Shows if the user has previously purchased a similar item.OfferedDiscount: Denotes whether the user was offered a discount on their purchase.BoughtItem: Represents whether the user made a purchase.  Each row corresponds to a customer in the customer interaction database, and their browsing and purchasing behaviour, along with whether they were offered a discount. This is the dataset we'll be using to train our causal model.  ","version":"Next","tagName":"h2"},{"title":"Set up CausaDB​","type":1,"pageTitle":"Understanding customer intent","url":"/docs/examples/use-cases/customer_intent#set-up-causadb","content":" CausaDB can be initialised and the dataset can be attached in the usual way:  const causadb = require('causadb'); causadb.setToken(&quot;&lt;YOUR_API_KEY&gt;&quot;); const model = causadb.createModel(&quot;customer_intent&quot;); model.attachDataFromDB(&quot;customer_intent_db&quot;);   If you don't already have an API key, get in touch to set one up.  ","version":"Next","tagName":"h2"},{"title":"Fitting the causal model​","type":1,"pageTitle":"Understanding customer intent","url":"/docs/examples/use-cases/customer_intent#fitting-the-causal-model","content":" Once we have initialised CausaDB and created our model instance, the next step is to define the causal model with the relevant variables and their relationships. This means specifying the input features and the causal relationships between them. We'll define these manually in this example, but there are also automated and semi-automated approaches that we explore in other examples. This only needs to be done once when first setting up the model or when updating it.  ","version":"Next","tagName":"h2"},{"title":"Defining the causal relationships​","type":1,"pageTitle":"Understanding customer intent","url":"/docs/examples/use-cases/customer_intent#defining-the-causal-relationships","content":" The causal model in CausaDB allows us to incorporate domain knowledge about potential causal relationships between variables. In our case, we have:  ViewedSimilarItem and BoughtSimilarItem as potential causes that might influence a user's decision to purchase. ViewedSimilarItem may also be a cause of BoughtSimilarItem.OfferedDiscount as an intervention variable, which we can control to observe its effect on the likelihood of purchase.BoughtItem as the target variable, indicating whether the user ended up purchasing the item.  This can be defined in CausaDB using  model.setNodes([&quot;ViewedSimilarItem&quot;, &quot;BoughtSimilarItem&quot;, &quot;OfferedDiscount&quot;, &quot;BoughtItem&quot;]); model.setEdges([ (&quot;ViewedSimilarItem&quot;, &quot;BoughtSimilarItem&quot;), (&quot;ViewedSimilarItem&quot;, &quot;OfferedDiscount&quot;), (&quot;BoughtSimilarItem&quot;, &quot;OfferedDiscount&quot;), (&quot;BoughtSimilarItem&quot;, &quot;BoughtItem&quot;), (&quot;OfferedDiscount&quot;, &quot;BoughtItem&quot;) ]);   ","version":"Next","tagName":"h3"},{"title":"Running training​","type":1,"pageTitle":"Understanding customer intent","url":"/docs/examples/use-cases/customer_intent#running-training","content":" After defining the variables and their causal relationships, we can fit the model to our dataset. This process takes place on the CausaDB cloud and for a small dataset with a few columns (like our example), should take less than a second.  model.train();   With the train method, the model learns from the historical data in our dataset. This training process allows CausaDB to understand how different variables interact causally and how interventions (like offering a discount) can influence the likelihood of a user making a purchase. This also makes the model ready for production, and it can now be queried to understand when to offer a discount to a user.  ","version":"Next","tagName":"h3"},{"title":"Using the model in production​","type":1,"pageTitle":"Understanding customer intent","url":"/docs/examples/use-cases/customer_intent#using-the-model-in-production","content":" CausaDB is cloud-first, so once training is complete, the model is already available in production. This means that from a NodeJS server that handles API calls from your frontend, you can simply connect to CausaDB as we did earlier, retrieve the model, and then run the query needed for your application. In this case we'll retrieve the model using:  const model = CausaDB.getModel(&quot;customer_intent&quot;);   This will pull in the model from your CausaDB model database ready for querying. Our goal is to determine whether or not to offer a discount to a current user to maximise the chance they'll purchase an item. The information we have about the current user will be ViewedSimilarItem and BoughtSimilarItem, let's assume these are available at the NodeJS server by the same variable names.  const optimalAction = model.optimalActions({ actions: ['OfferedDiscount'], outcomes: [ {'node': 'BoughtItem', 'target': 1} ], variables: [ {'node': 'ViewedSimilarItem', 'value': ViewedSimilarItem}, {'node': 'BoughtSimilarItem', 'value': BoughtSimilarItem}, ], })   The response optimalAction will contain the recommended action for this specific user:  { actions: [ {'OfferedDiscount': 1} ] }   This can then be accessed programmatically to inform the frontend whether to show the discount/offer a coupon/etc or not.  ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Understanding customer intent","url":"/docs/examples/use-cases/customer_intent#conclusion","content":" This was a minimal example with a simple problem to demonstrate how CausaDB can be used in production to boost sales strategy. By leveraging CausaDB's capabilities, we can make informed decisions about offering discounts to customers, ultimately leading to more effective marketing strategies and increased sales. This approach allows us to move beyond traditional correlation-based analysis and into the realm of causal inference, providing deeper and trustworthy insights into customer behavior and decision-making processes. For a comparison of how our causal AI model performs compared to a more conventional correlational AI, see our blog. ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/guide/getting-started/installation","content":"","keywords":"","version":"Next"},{"title":"CLI/Python interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#clipython-interface","content":" CausaDB is managed through a CLI tool that can be installed through pip. We also provide Python, Node.js, and REST API interfaces. The CLI tool is bundled with the Python interface, so should be installed regardless of whether you want to use the Python interface.  ","version":"Next","tagName":"h2"},{"title":"Installing the CLI/Python interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#installing-the-clipython-interface","content":" The CLI (and bundled Python interface) can be installed from PyPI using:  pip install causadb   Once the CLI is installed, you'll need to set it up with your access credentials. You can do this by running the login command:  causadb login   Follow the instructions in the CLI to link it with your cloud account.  ","version":"Next","tagName":"h3"},{"title":"Authenticating the Python interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#authenticating-the-python-interface","content":" When using the Python interface on a remote instance (such as a server or Colab notebook) you'll need to authenticate within the Python interface. This can be done using the following code snippet:  import causadb causadb.set_token(&quot;AHFDOIEUBDKSDVXHFSKH&quot;)   ","version":"Next","tagName":"h3"},{"title":"Node.js interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#nodejs-interface","content":" The Node.js client is intended for use with JavaScript and Typescript, and is ideal for server-side (not client-side) software.  ","version":"Next","tagName":"h2"},{"title":"Installing the Node.js interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#installing-the-nodejs-interface","content":" The Node.js client is available on npm, and can be installed in the standard way:  npm install causadb   ","version":"Next","tagName":"h3"},{"title":"Authenticating the Node.js interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#authenticating-the-nodejs-interface","content":" To authenticate the Node.js interface, run:  import { CausaDB } from &quot;causadb&quot;; CausaDB.setToken(&quot;AHFDOIEUBDKSDVXHFSKH&quot;);   ","version":"Next","tagName":"h3"},{"title":"Next steps​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#next-steps","content":" Once you've set up your CLI and whichever interface you're working with, it's time to get started working with causal AI on the cloud. Follow our quickstart guide to get started. ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/guide/getting-started/intro","content":"","keywords":"","version":"Next"},{"title":"Why do I need causal AI?​","type":1,"pageTitle":"Introduction","url":"/docs/guide/getting-started/intro#why-do-i-need-causal-ai","content":" Standard AI algorithms are pattern-matching engines that are great at finding patterns in data, but they have no concept of cause and effect. This is a major problem when we try to use standard AI models (LLMs, neural nets, XGBoost, etc) to inform decision-making. Without understanding causation, these other algorithms confuse correlation for causation and can make inefficient and at worst damaging recommendations.  Causal AI models are built from the ground up to capture causal structures. This gives them an understanding of cause and effect, so they can be trusted to make data-driven decisions. Until now, causal AI has largely been an academic pursuit with limited adoption in the real world. CausaDB is a platform to make it easy to get causal AI models out of the lab and into production.  ","version":"Next","tagName":"h2"},{"title":"What is CausalOps?​","type":1,"pageTitle":"Introduction","url":"/docs/guide/getting-started/intro#what-is-causalops","content":" CausalOps is an extension of the concept of MLOps to causal AI. Standard MLOps practices alone aren't enough for productionising causal AI models, so CausalOps bridges the gap to make it simple to build and maintain causal workflows. CausaDB is the only platform that makes CausalOps as easy as a few lines of code.  ","version":"Next","tagName":"h2"},{"title":"Why do I need CausaDB?​","type":1,"pageTitle":"Introduction","url":"/docs/guide/getting-started/intro#why-do-i-need-causadb","content":" Managing AI models in development is hard enough, and deploying AI is even harder. Causal AI models have different requirements to standard AI models, and popular workflows and software are not designed or suited for causal AI. This leads to resistance to adopting causal AI and stops organisations from being able to reap the huge rewards of causal AI.  We built CausaDB to solve this problem. CausaDB handles model development workflows, deployment pipelines, versioning, quality assurance, and infrastructure orchestration and management in a single, simple framework. Your team can start deploying causal AI in minutes instead of months.  ","version":"Next","tagName":"h2"},{"title":"Want to get started?​","type":1,"pageTitle":"Introduction","url":"/docs/guide/getting-started/intro#want-to-get-started","content":" To get started with CausaDB, get in touch with our team to receive access credentials. If you already have your access credentials, follow the installation instructions in this documentation site. ","version":"Next","tagName":"h2"},{"title":"Supply chain optimisation","type":0,"sectionRef":"#","url":"/docs/examples/use-cases/supply_chain","content":"","keywords":"","version":"Next"},{"title":"Scenario: Retail demand prediction​","type":1,"pageTitle":"Supply chain optimisation","url":"/docs/examples/use-cases/supply_chain#scenario-retail-demand-prediction","content":" Consider a retailer aiming to predict the demand for a seasonal product. Two critical factors influencing this demand are the time of year (weeks 1 - 52) and the average outside temperature. A traditional predictive model would struggle to forecast demand beyond a single timestep as it fails to account for how temperature changes with the season. To overcome this, we can opt for a causal AI approach.  ","version":"Next","tagName":"h2"},{"title":"Data source​","type":1,"pageTitle":"Supply chain optimisation","url":"/docs/examples/use-cases/supply_chain#data-source","content":" The retailer collects historical data, including:  Week: Represents the week of the year, ranging from 1 to 52.OutsideTemp: The average outside temperature (°C) recorded in degrees Celsius for that week.UnitsSold: The quantity of the product sold during that week.  The data might look something like this:  Week\tAvgTemp\tUnitsSold1\t5\t100 15\t20\t400 30\t30\t500 40\t15\t300 52\t2\t150  ","version":"Next","tagName":"h2"},{"title":"Set up CausaDB​","type":1,"pageTitle":"Supply chain optimisation","url":"/docs/examples/use-cases/supply_chain#set-up-causadb","content":" Before we can train a causal AI model, CausaDB must be initialised and a dataset ttached. This can be done in the usual way:  const causadb = require('causadb'); causadb.setToken(&quot;&lt;YOUR_API_KEY&gt;&quot;); const model = causadb.createModel(&quot;customer_intent&quot;); model.attachDataFromDB(&quot;customer_intent_db&quot;);   If you don't already have an API key, get in touch to set one up.  ","version":"Next","tagName":"h2"},{"title":"Causal Model Development​","type":1,"pageTitle":"Supply chain optimisation","url":"/docs/examples/use-cases/supply_chain#causal-model-development","content":" Using CausaDB, we can set up a model that understands and predicts the dynamic relationship between the season, temperature, and product demand. This model can predict future demand accurately by understanding how temperature typically varies across the year.  ","version":"Next","tagName":"h2"},{"title":"Defining the Causal Relationships​","type":1,"pageTitle":"Supply chain optimisation","url":"/docs/examples/use-cases/supply_chain#defining-the-causal-relationships","content":" The causal model can be defined with the following relationships:  Season influences Average Outside Temperature.Both Season and Average Outside Temperature influence Product Demand.  This can be implemented in CausaDB as:  model.setNodes([&quot;Week&quot;, &quot;AvgTemp&quot;, &quot;UnitsSold&quot;]); model.setEdges([ (&quot;Week&quot;, &quot;AvgTemp&quot;), (&quot;Week&quot;, &quot;UnitsSold&quot;), (&quot;AvgTemp&quot;, &quot;UnitsSold&quot;), ]);   Since the Week variable is seasonal (e.g. week 52 in one year is only one week before week 1 in the next year), it's also good practice to define Week as a seasonal variable. This can be done using the setNodeTypes function:  model.setNodeTypes({ &quot;Week&quot;: {type: &quot;seasonal&quot;, min: 1, max: 52} })   ","version":"Next","tagName":"h3"},{"title":"Model Training and Deployment​","type":1,"pageTitle":"Supply chain optimisation","url":"/docs/examples/use-cases/supply_chain#model-training-and-deployment","content":" Once the causal relationships are defined, the model can be trained on historical data. Post-training, it will be capable of forecasting product demand for future seasons, taking into account the predicted temperature changes. The training process takes place on the CausaDB cloud and for a small dataset with a few columns (like our example), should take less than a second.  model.train();   With the train method, the model learns from the historical data in our dataset. This training process allows CausaDB to understand how different variables interact causally and how time of the year will affect average temperature, and how they will both affect demand for a seasonal product.  Once the training is complete, the model will immediately be ready for production. It can now be queried to forecast product demand into the future.  ","version":"Next","tagName":"h3"},{"title":"Using the model in production to make recommendations​","type":1,"pageTitle":"Supply chain optimisation","url":"/docs/examples/use-cases/supply_chain#using-the-model-in-production-to-make-recommendations","content":" CausaDB is cloud-first, so once training is complete, the model is already available in production. A common use case is to run a causal query from a REST API. This has the benefit of being accessible from virtually any software environment with internet access, regardless of what language the application is written in. To forecast the demand for a particular week in the future (let's say week 25), we can simply send a query to the simulate-action endpoint to simulate the action of setting the week to the 25th week of the year:  Endpoint: api.causadb.com/v1/simulate-action/customer_intentMethod: POST  Request Body:  { &quot;Week&quot;: 25 }   Note: You'll need to include your API key in the request headers. Follow the guide in the API reference for how to do this.  The response body will contain the estimated state of the variables in week 25.  Response Body:  { &quot;Week&quot;: 25, &quot;AvgTemp&quot;: 22, &quot;UnitsSold&quot;: 450 }   ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Supply chain optimisation","url":"/docs/examples/use-cases/supply_chain#conclusion","content":" This case study demonstrates how causal AI can be used in supply chain management and optimisation by predicting demand for retail items. By using causal AI, businesses and organisations can avoid the pitfalls of traditional predictive models through a deeper understanding of the causal links between variables (such as time and temperature, in this case). Though we focused on a physical retail product example in this case, a similar approach could be used for digital products, predicting infrastructure load, and more. The future of AI in fields like supply chain management lies in its ability to understand cause and effect. If you think causal AI can help your business, get in touch with us. ","version":"Next","tagName":"h2"},{"title":"Quickstart (Node.js)","type":0,"sectionRef":"#","url":"/docs/guide/getting-started/quickstart","content":"","keywords":"","version":"Next"},{"title":"Connect to CausaDB with the Node client​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#connect-to-causadb-with-the-node-client","content":" Firstly, we need to set up the client with your API key. The API key can be provided as an environment variable CAUSA_API_KEY or, as below, by providing the API key when the client is initialised.  const causadb = require('causadb'); causadb.setToken(&quot;&lt;YOUR_API_KEY&gt;&quot;); model = causadb.createModel(&quot;my_model_name&quot;);   ","version":"Next","tagName":"h2"},{"title":"Connect a data source​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#connect-a-data-source","content":" You can load data from a database or a file. To load data from a database, you'll first need to register it with CausaDB. To find out how to do this, follow the CLI guide. For the purposes of this tutorial we'll assume you've already registered a database called data.  ","version":"Next","tagName":"h2"},{"title":"From a database​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#from-a-database","content":" To load data from a database registered with CausaDB, use attachDataFromDB:  model.attachDataFromDB(&quot;my_database&quot;);   Note You'll need to have registered a database called &quot;my_database&quot; with CausaDB first using the command line interface (CLI). See the examples page of this documentation for an example of how to do this.  ","version":"Next","tagName":"h3"},{"title":"From a file​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#from-a-file","content":" To load data from a local file, use attachDataFromFile:  model.attachDataFromFile(&quot;path/to/data.csv&quot;);   ","version":"Next","tagName":"h3"},{"title":"Specify a model​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#specify-a-model","content":" A causal model is defined by its causal structure. To assign a causal structure, we can add graph features using setNodes and setEdges:  model.setNodes([&quot;x1&quot;, &quot;x2&quot;, &quot;x3&quot;]) model.setEdges([ (&quot;x1&quot;, &quot;x2&quot;), (&quot;x2&quot;, &quot;x3&quot;) ])   The node variables x1, x2, and x3 should be present as columns in the data source.  ","version":"Next","tagName":"h2"},{"title":"Fit the model​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#fit-the-model","content":" Once a data source and structure have been defined, it's time to fit a causal model to the data. This is simple using the default model settings:  model.fit()   Additional parameters can be passed to the model fit function, but we'll keep things simple for now.  Running the fit function will initialise the model fitting process. Depending on the size of the dataset and complexity of the causal structure, this can take anywhere from a few milliseconds to several hours. If the model fitting is being run programmatically, it could be useful to check model fitting progress by running:  model.status()   If the model fitting process is still running, the response will look something like:  { 'status': 'fitting', 'details': { 'running_time': 134, }, ... }   If the model fitting has already finished, you'll get a response like this:  { 'status': 'ready', ... }   ","version":"Next","tagName":"h2"},{"title":"Deploying your model​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#deploying-your-model","content":" The model definition and fitting process is all run in the cloud, so once a model has been defined and fit, it is ready to be used in production. To use a model in production, it can be referred to either by its model name (we set this as &quot;my_model_name&quot; earlier) or its model reference ID, which can be obtained using:  model.id   xGl3baAzQasWC0KW   The model ID will refer to this specific version of the model, whereas the name will refer to the latest model with the same name, so we recommend using the ID where possible.  ","version":"Next","tagName":"h2"},{"title":"Using the model​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#using-the-model","content":" The core value of causal AI can be accessed through a series of core functions. We'll cover some common use cases below.  ","version":"Next","tagName":"h2"},{"title":"Simulating outcomes​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#simulating-outcomes","content":" One of the central features of causal AI is the ability to simulate outcomes after a change in the inputs. This can be used to estimate how taking an action will change the outcome. This is something that non-causal models struggle with because they don't understand how the input variables are causally related. In CausaDB, we can estimate the impact of an action using:  model.simulateAction({'x1': 1});   { 'x1': 1.000, 'x2': 0.551, 'x3': -0.382, ... }   This will estimate the value of each variable after setting x1 equal to 1. This can be used to estimate how taking an action or making a recommendation is likely to change a target outcome, and any side-effects such an action might have.  ","version":"Next","tagName":"h3"},{"title":"Finding optimal actions​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#finding-optimal-actions","content":" Following on from simulating the outcomes of actions, an obvious next step is to find the optimal set of actions needed to achieve a target outcome. This problem can be solved in CausaDB using the optimalActions function:  model.optimalActions({ actions: ['x1'], outcomes: [ {'node': 'x3', 'target': -0.5} ], constraints: [ {'node': 'x2', 'bounds': [-1, 1]} ], })   { actions: [ {'x1': 1.289} ], outcomes: [ {'x3': -0.498} ], constraints: [ {'x2': 0.736} ] }   This will find the optimal value of x1 to achieve the target outcome of x3 = -0.5 subject to a set of constraints (optional) that x2 must be between -1 and 1.  ","version":"Next","tagName":"h3"},{"title":"Next steps​","type":1,"pageTitle":"Quickstart (Node.js)","url":"/docs/guide/getting-started/quickstart#next-steps","content":" This quickstart guide is designed to give you a quick overview of how to get started with CausaDB. To learn more about the full functionality of CausaDB, read the (examples)[ww.google.com] and reference sections of the documentation to see how CausaDB can help to solve your specific use cases. ","version":"Next","tagName":"h2"},{"title":"List Data","type":0,"sectionRef":"#","url":"/docs/reference/api/data/get__data","content":"List Data Tags: Data Method: GET Endpoint: https://api.causadb.com/v1/data Description: List all data sources in the organization. Organization is determined by the token. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"Add Data","type":0,"sectionRef":"#","url":"/docs/reference/api/data/post__data_data_name","content":"Add Data Tags: Data Method: POST Endpoint: https://api.causadb.com/v1/data/{data_name} Description: Adds a dataset to the organization. Parameters: data_name (path): Data name Request Body: Description: Data Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Remove Data","type":0,"sectionRef":"#","url":"/docs/reference/api/data/delete__data_data_name","content":"Remove Data Tags: Data Method: DELETE Endpoint: https://api.causadb.com/v1/data/{data_name} Description: Removes a dataset from the organization. This operation cannot be undone. Parameters: data_name (path): Data name Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Delete Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/delete__models_model_name","content":"Delete Model Tags: Models Method: DELETE Endpoint: https://api.causadb.com/v1/models/{model_name} Description: No description provided Parameters: model_name (path): The name of the model to delete Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Detach Data From A Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/delete__models_model_name_detach","content":"Detach Data From A Model Tags: Models Method: DELETE Endpoint: https://api.causadb.com/v1/models/{model_name}/detach Description: Detaches data from a model. Parameters: model_name (path): The name of the model to create Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"List Models","type":0,"sectionRef":"#","url":"/docs/reference/api/models/get__models","content":"List Models Tags: Models Method: GET Endpoint: https://api.causadb.com/v1/models Description: Returns a list of the names of all models. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"Get Model Information","type":0,"sectionRef":"#","url":"/docs/reference/api/models/get__models_model_name","content":"Get Model Information Tags: Models Method: GET Endpoint: https://api.causadb.com/v1/models/{model_name} Description: Returns details about a model. Parameters: model_name (path): The name of the model to get information about Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Create Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name","content":"Create Model Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name} Description: Creates a new causal model with a given configuration and data. Parameters: model_name (path): The name of the model to create Request Body: Description: The model configuration in JSON format Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Attach Data To A Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_attach_data_name","content":"Attach Data To A Model Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/attach/{data_name} Description: Attaches data to a model. Parameters: model_name (path): The name of the model to createdata_name (path): The name of the data to use for training Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Optimal Actions","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_optimal-actions","content":"Optimal Actions Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/optimal-actions Description: Find the set of optimal actions to achieve a desired outcome, using a trained model. Parameters: model_name (path): The name of the model to query Request Body: Description: Parameters of the optimization query. target_outcomes is a dictionary of target outcomes, actionable_nodes is a list of nodes that can be intervened on, and condition_nodes is a dictionary of nodes with known and fixed values. Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Train A Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_train","content":"Train A Model Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/train Description: Train a model. Parameters: model_name (path): The name of the model to train Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Simulate Actions","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_simulate-actions","content":"Simulate Actions Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/simulate-actions Description: Simulate action(s) using a trained model. Parameters: model_name (path): The name of the model to query Request Body: Description: The query to run against the model Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Health","type":0,"sectionRef":"#","url":"/docs/reference/api/system/get__health","content":"Health Tags: System Method: GET Endpoint: https://api.causadb.com/v1/health Description: Checks the health of the system. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"Account Details","type":0,"sectionRef":"#","url":"/docs/reference/api/system/get__account","content":"Account Details Tags: System Method: GET Endpoint: https://api.causadb.com/v1/account Description: Returns details about the account. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"List linked databases","type":0,"sectionRef":"#","url":"/docs/reference/cli/db-list","content":"List linked databases 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"Link a database","type":0,"sectionRef":"#","url":"/docs/reference/cli/db-add","content":"Link a database 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"Unlink a database","type":0,"sectionRef":"#","url":"/docs/reference/cli/db-remove","content":"Unlink a database 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"Log in to CausaDB","type":0,"sectionRef":"#","url":"/docs/reference/cli/login","content":"Log in to CausaDB 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"Show logs","type":0,"sectionRef":"#","url":"/docs/reference/cli/logs","content":"Show logs 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"Create a model","type":0,"sectionRef":"#","url":"/docs/reference/cli/model-add","content":"Create a model 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"Retrieve a model","type":0,"sectionRef":"#","url":"/docs/reference/cli/model-get","content":"Retrieve a model 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"List models","type":0,"sectionRef":"#","url":"/docs/reference/cli/model-list","content":"List models 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"Add Data","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/add_data","content":"Add Data def add_data(data_name: str) -&gt; Data Add data to the CausaDB system. Arguments: data_name str - The name of the data. Returns: Data - The data object.","keywords":"","version":"Next"},{"title":"Remove a model","type":0,"sectionRef":"#","url":"/docs/reference/cli/model-remove","content":"Remove a model 🛠️ Documentation is still under development. Please check back again soon. In the meantime get in touch if you need further support.","keywords":"","version":"Next"},{"title":"Constructor","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/Constructor","content":"class CausaDB() CausaDB client class to interact with the CausaDB system. Constructor def __init__(custom_url=None) -&gt; None Initializes the CausaDB client. Arguments: custom_url str, optional - The URL of the CausaDB server. For custom deployments or development purposes. Defaults to None.","keywords":"","version":"Next"},{"title":"Get Data","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/get_data","content":"Get Data def get_data(data_name: str) -&gt; Data Get a data by name. Arguments: data_name str - The name of the data. Returns: Data - The data object.","keywords":"","version":"Next"},{"title":"Create Model","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/create_model","content":"Create Model def create_model(model_name: str) -&gt; Model Create a model and add it to the CausaDB system. Arguments: model_name str - The name of the model. Returns: Model - The model object.","keywords":"","version":"Next"},{"title":"Get Model","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/get_model","content":"Get Model def get_model(model_name: str) -&gt; Model Get a model by name. Arguments: model_name str - The name of the model. Returns: Model - The model object.","keywords":"","version":"Next"},{"title":"List Data","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/list_data","content":"List Data def list_data() -&gt; list[Data] List all data. Returns: list[Data] - A list of data objects. data","keywords":"","version":"Next"},{"title":"List Models","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/list_models","content":"List Models def list_models() -&gt; list[Model] List all models. Returns: list[Model] - A list of model objects.","keywords":"","version":"Next"},{"title":"Set Token","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/set_token","content":"Set Token def set_token(token_id: str, token_secret: str) -&gt; bool Set the token for the CausaDB client. Arguments: token_id str - Token ID provided by CausaDB.token_secret str - Token secret provided by CausaDB. Returns: bool - True if the token is valid, False otherwise.","keywords":"","version":"Next"},{"title":"From CSV","type":0,"sectionRef":"#","url":"/docs/reference/python/Data/from_csv","content":"From CSV def from_csv(filepath: str) -&gt; None Add data from a CSV file. Arguments: filepath str - The path to the CSV file.","keywords":"","version":"Next"},{"title":"Remove","type":0,"sectionRef":"#","url":"/docs/reference/python/Data/remove","content":"Remove def remove() -&gt; None Remove the data from the CausaDB system.","keywords":"","version":"Next"},{"title":"Constructor","type":0,"sectionRef":"#","url":"/docs/reference/python/Data/Constructor","content":"class Data() Constructor def __init__(data_name: str, client: &quot;CausaDB&quot;) -&gt; None Initializes the Data class. Arguments: data_name str - The name of the data.client CausaDB - A CausaDB client.","keywords":"","version":"Next"},{"title":"model","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/Constructor","content":"model class Model() Constructor def __init__(model_name: str, client: &quot;CausaDB&quot;) -&gt; None Initializes the Model class. Arguments: model_name str - The name of the model.client CausaDB - A CausaDB client.","keywords":"","version":"Next"},{"title":"Detach","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/detach","content":"Detach def detach(data_name: str) -&gt; None Detach data from the model. Arguments: data_name str - The name of the data to detach.","keywords":"","version":"Next"},{"title":"Attach","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/attach","content":"Attach def attach(data_name: str) -&gt; None Attach data to the model. Arguments: data_name str - The name of the data to attach.","keywords":"","version":"Next"},{"title":"Get Node Types","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/get_node_types","content":"Get Node Types def get_node_types() -&gt; dict Get the node types of the model. Returns: dict - A dictionary of node types.","keywords":"","version":"Next"},{"title":"Get Edges","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/get_edges","content":"Get Edges def get_edges() -&gt; list[tuple[str, str]] Get the edges of the model. Returns: list[tuple[str, str]]: A list of tuples representing edges.","keywords":"","version":"Next"},{"title":"Optimal Actions","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/optimal_actions","content":"Optimal Actions def optimal_actions(target_outcomes: dict[str, float], actionable_nodes: list[str], condition_nodes: dict[str, float] = \\{\\}) -&gt; dict Get the optimal actions for a given set of target outcomes. Arguments: target_outcomes dict[str, float] - A dictionary of target outcomes.actionable_nodes list[str] - A list of actionable nodes.condition_nodes dict[str, float] - A dictionary of condition nodes. Returns: dict - A dictionary representing the optimal actions. Example: model.optimal_actions( ... {&quot;x&quot;: 0.5}, ... [&quot;y&quot;], ... {&quot;z&quot;: 0.5} ... ) causadb","keywords":"","version":"Next"},{"title":"Get Nodes","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/get_nodes","content":"Get Nodes def get_nodes() -&gt; list[str] Get the nodes of the model. Returns: list[str] - A list of node names.","keywords":"","version":"Next"},{"title":"Remove","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/remove","content":"Remove def remove() -&gt; None Remove the model from the CausaDB system.","keywords":"","version":"Next"},{"title":"Set Node Types","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/set_node_types","content":"Set Node Types def set_node_types(node_types: dict) -&gt; None Set the node types of the model. Arguments: node_types dict - A dictionary of node types. Example: model.set_node_types({ ... &quot;x1&quot;: {&quot;type&quot;: &quot;seasonal&quot;, &quot;min&quot;: 0, &quot;max&quot;: 1} ... })","keywords":"","version":"Next"},{"title":"Set Edges","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/set_edges","content":"Set Edges def set_edges(edges: list[tuple[str, str]]) -&gt; None Set the edges of the model. Arguments: edges list[tuple[str, str]] - A list of tuples representing edges. Example: model.set_edges([ ... (&quot;SaturatedFatsInDiet&quot;, &quot;Weight&quot;), ... (&quot;Weight&quot;, &quot;BMI&quot;), ... ])","keywords":"","version":"Next"},{"title":"Simulate Actions","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/simulate_actions","content":"Simulate Actions def simulate_actions(action: dict) -&gt; dict Simulate an action on the model. Arguments: action dict - A dictionary representing the action. Returns: dict - A dictionary representing the result of the action.","keywords":"","version":"Next"},{"title":"Set Nodes","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/set_nodes","content":"Set Nodes def set_nodes(nodes: list[str]) -&gt; None Set the nodes of the model. Arguments: nodes list[str] - A list of node names. Example: model.set_nodes([&quot;x&quot;, &quot;y&quot;, &quot;z&quot;])","keywords":"","version":"Next"},{"title":"Status","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/status","content":"Status def status() -&gt; str Get the status of the model. Returns: str - The status of the model.","keywords":"","version":"Next"},{"title":"Train","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/train","content":"Train def train(wait=True, poll_interval=0.2) -&gt; None Train the model. Arguments: wait bool - Whether to wait for the model to finish training.poll_interval float - The interval at which to poll the server for the model status. Example: model.train()","keywords":"","version":"Next"}],"options":{"id":"default"}}