"use strict";(self.webpackChunkcausadb_docs=self.webpackChunkcausadb_docs||[]).push([[3150],{3356:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var s=n(5893),r=n(1151);const i={},c="Find Best Actions",o={id:"reference/python/Model/find_best_actions",title:"Find Best Actions",description:"Get the optimal actions for a given set of target outcomes.",source:"@site/docs/reference/python/Model/find_best_actions.md",sourceDirName:"reference/python/Model",slug:"/reference/python/Model/find_best_actions",permalink:"/docs/reference/python/Model/find_best_actions",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"referenceSidebar",previous:{title:"Detach",permalink:"/docs/reference/python/Model/detach"},next:{title:"Get Edges",permalink:"/docs/reference/python/Model/get_edges"}},d={},a=[];function l(e){const t={blockquote:"blockquote",code:"code",em:"em",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"find-best-actions",children:"Find Best Actions"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def find_best_actions(\n        targets: dict[str, float],\n        actionable: list[str],\n        fixed: dict[str, list[float]] = \\{\\},\n        constraints: dict[str, tuple] = \\{\\},\n        data: pd.DataFrame = None,\n        target_importance: dict[str, float] = \\{\\}) -> pd.DataFrame\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get the optimal actions for a given set of target outcomes."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"targets"})," ",(0,s.jsx)(t.em,{children:"dict[str, float]"})," - A dictionary representing the target outcomes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"actionable"})," ",(0,s.jsx)(t.em,{children:"list[str]"})," - A list of actionable nodes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"fixed"})," ",(0,s.jsx)(t.em,{children:"dict[str, float]"})," - A dictionary representing the fixed nodes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"constraints"})," ",(0,s.jsx)(t.em,{children:"dict[str, tuple]"})," - A dictionary representing the constraints."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"data"})," ",(0,s.jsx)(t.em,{children:"pd.DataFrame"})," - A dataframe representing the data."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"target_importance"})," ",(0,s.jsx)(t.em,{children:"dict[str, float]"})," - A dictionary representing the target importance."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"dict"})," - A dictionary representing the optimal actions."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:'model.optimal_actions(\n...     {"x": 0.5},\n...     ["x"],\n...     {"y": 0.5}'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)("a",{id:"model.Model.causal_attributions"})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>c});var s=n(7294);const r={},i=s.createContext(r);function c(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);