{"searchDocs":[{"title":"March 2024","type":0,"sectionRef":"#","url":"/updates/march-2024","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"March 2024","url":"/updates/march-2024#features","content":" Major core functionality updates with improved speed and performance.Support for fixed argument in find_best_actions.Support for both continuous and binary data types.Support for pandas data loading.Improved containerisation for easier self-hosting.Added smart building heating example to documentation.Added updates blog (what you're reading right now!) to documentation site.  ","version":null,"tagName":"h2"},{"title":"April 2024","type":0,"sectionRef":"#","url":"/updates/april-2024","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"April 2024","url":"/updates/april-2024#features","content":" Added bounds support across models to prevent predictions outside of expected ranges.Internal data simulation for much faster testing and development.Internal logging and debugging system for faster issue resolution.Added constraints to find_best_actions to prevent invalid actions &amp; outcomes.Added batch support for find_best_actions to make it easier to find best actions over multiple scenarios.Add support for weighted multi-objective optimisation in find_best_actions.  ","version":null,"tagName":"h2"},{"title":"Improvements​","type":1,"pageTitle":"April 2024","url":"/updates/april-2024#improvements","content":" Internal refactoring of server codebase for faster development cycles.Upgraded Node.js client to work with latest version of the server.Improved error handling for invalid user inputs. ","version":null,"tagName":"h2"},{"title":"Improvements​","type":1,"pageTitle":"March 2024","url":"/updates/march-2024#improvements","content":" Various improvements to user experience including renaming of functions and arguments.Improved documentation and examples.Improved error handling for invalid user inputs.Atomic artefact management for robust porting of models between versions.Various polishing and improvements to documentation site. ","version":null,"tagName":"h2"},{"title":"Google Colab Notebooks","type":0,"sectionRef":"#","url":"/docs/examples/colab_notebooks","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Google Colab Notebooks","url":"/docs/examples/colab_notebooks#examples","content":" Example\tDescriptionQuick Start\tA quick introduction to CausaDB and how to get started Heating Control\tFinding the optimal heating control strategy for a commercial smart building ","version":"Next","tagName":"h2"},{"title":"Command Line Interface","type":0,"sectionRef":"#","url":"/docs/guide/causadb/cli","content":"","keywords":"","version":"Next"},{"title":"Setup​","type":1,"pageTitle":"Command Line Interface","url":"/docs/guide/causadb/cli#setup","content":" The CLI (and bundled Python interface) can be installed from PyPI using:  pip install causadb   Once the CLI is installed, you'll need to set it up with your access credentials. You can do this by running the setup command:  causadb account setup   Follow the instructions in the CLI to link it with your cloud account.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Command Line Interface","url":"/docs/guide/causadb/cli#usage","content":" The CLI provides a number of commands for managing your account and interacting with CausaDB. You can see a list of available commands by running:  causadb --help   You can also get help on a specific command by running:  causadb &lt;command&gt; --help  ","version":"Next","tagName":"h2"},{"title":"Clients","type":0,"sectionRef":"#","url":"/docs/guide/causadb/client","content":"Clients CausaDB provides Python and Node.js libraries to interact with the CausaDB server. These libraries are object-oriented and make use of client objects to interact with the server. This concept is similar to the Python libraries for popular databases like MongoDB, Pinecone, and others. A typical client initialisation looks something like this (in Python): import causadb client = causadb.CausaDB(token=&quot;&lt;YOUR_TOKEN_HERE&gt;&quot;) This code initialises a connection to the CausaDB server using the provided token and handles all the necessary authentication and communication with the server. The text &quot;&lt;YOUR_TOKEN_HERE&gt;&quot; above would be replaced by the CausaDB token provided by us. The client object can then be used to interact with the CausaDB server. For example, to create a new model, you would use the following code: model = client.create_model(&quot;my-new-model&quot;) REST API access is also available, but as REST is stateless, it requires you to manage the authentication and session state yourself.","keywords":"","version":"Next"},{"title":"Data Sources","type":0,"sectionRef":"#","url":"/docs/guide/causadb/datasources","content":"","keywords":"","version":"Next"},{"title":"Local Files​","type":1,"pageTitle":"Data Sources","url":"/docs/guide/causadb/datasources#local-files","content":" Local files can be uploaded to CausaDB using the web interface. The supported file formats include CSV, JSON, and Pandas DataFrames. The data is then stored in CausaDB and can be used for training models. This method is useful for small datasets or for quick prototyping, but is not recommended for large datasets or for production use.  There are a number of downsides to using local files as the data source:  Duplication: Data is stored in CausaDB and in the local file, which can lead to inconsistencies.Freshness: Changes to the file are not automatically updated in CausaDB, so the data can become stale.Performance: Reading and uploading data from a local file can be slow for very large datasets.  ","version":"Next","tagName":"h2"},{"title":"Databases​","type":1,"pageTitle":"Data Sources","url":"/docs/guide/causadb/datasources#databases","content":" note Coming soon: This feature is not yet publicly available, but is planned for a near-term release.  CausaDB can connect to a variety of databases and data lakes to ingest data for training models. The databases we're planning to support include SQL, BigQuery, Snowflake, and others. The data is read directly from the database and stored in CausaDB, which avoids duplication and ensures that the data is always up-to-date. This method is recommended for production use and for large datasets. ","version":"Next","tagName":"h2"},{"title":"Model Deployment","type":0,"sectionRef":"#","url":"/docs/guide/causadb/deployment","content":"Model Deployment Model deployment is the process of making a trained causal model available for use in other systems, either through the REST API or supported client libraries. As a cloud-native platform, CausaDB models are designed to be deployment-ready out of the box. This means that once a model is trained, it can be used immediately in your applications. Once a model has been created, defined, and trained, as below (in Python): model = client.create_model(&quot;my-new-model&quot;) ... model.train(&quot;my-data-name&quot;) It can be accessed by name in deployment. This is usually in a new session, or in a different application. To access a model by name in Python, use the get_model method: model = client.get_model(&quot;my-new-model&quot;) note CausaDB will soon support model versioning, allowing you to keep track of changes to your model over time. This is useful for auditing, debugging, and for managing multiple versions of a model in production.","keywords":"","version":"Next"},{"title":"CausaDB Quickstart","type":0,"sectionRef":"#","url":"/docs/examples/causadb_quickstart","content":"","keywords":"","version":"Next"},{"title":"Initialise a client​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#initialise-a-client","content":" Before you can use CausaDB, you need to create a client. You can do this by providing your token key. We'll load from Google colab secrets in this example, but in production the token could be loaded from environment variables or a secret manager. In this example you can replace &lt;YOUR_TOKEN&gt; with your token.  from causadb import CausaDB from causadb.plotting import plot_causal_graph, plot_causal_attributions import numpy as np client = CausaDB(token=&quot;&lt;YOUR_TOKEN&gt;&quot;)   ","version":"Next","tagName":"h2"},{"title":"Registering a data source​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#registering-a-data-source","content":" CausaDB works by first registering data with the cloud service, and then attaching it to your model. Data can be loaded from a live database or a file. Loading from a database is preferred because it avoids duplication and keeps a single source of truth, but sometimes it will be necessary to load from a local file like a .csv or .xlsx, or even a Python pandas dataframe.  In this example we'll show how to load data from a pandas dataframe. The data we'll use are from one of the built-in example datasets that are included in the CausaDB Python library.  from causadb.examples.heating import get_heating_dataset, set_heating data = get_heating_dataset() client \\ .add_data(&quot;quickstart-heating-data&quot;) \\ .from_pandas(data) data.head()   \tday\toutdoor_temp\theating\tindoor_temp\tenergy0\t0\t14.73\t55.0\t17.80\t673.0 1\t1\t12.07\t61.0\t20.47\t729.0 2\t2\t14.30\t58.0\t19.47\t703.0 3\t3\t15.27\t51.0\t17.49\t649.0 4\t4\t15.18\t53.0\t18.73\t650.0  ","version":"Next","tagName":"h2"},{"title":"Defining a causal model​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#defining-a-causal-model","content":" The code below creates a causal model and defines its causal structure. This can be done through code, as below, or through our BETA model builder web interface. In the first two lines of set_edges, for example, we're saying that the outdoor temperature might effect both the indoor temperature and the heating setting. This allows the model to learn any relationship between those variables when it is trained.  tip For information on defining the causal structure structure see Model Structure Concepts  # Define a causal model (can also be done in the UI) model = client.create_model(&quot;quickstart-heating-model&quot;) model.set_nodes([&quot;outdoor_temp&quot;, &quot;heating&quot;, &quot;indoor_temp&quot;, &quot;energy&quot;]) model.set_edges([ (&quot;outdoor_temp&quot;, &quot;heating&quot;), (&quot;outdoor_temp&quot;, &quot;indoor_temp&quot;), (&quot;heating&quot;, &quot;indoor_temp&quot;), (&quot;heating&quot;, &quot;energy&quot;), (&quot;indoor_temp&quot;, &quot;energy&quot;) ])   ","version":"Next","tagName":"h2"},{"title":"Visualising the model​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#visualising-the-model","content":" We can see what this causal model looks like for manual checking by visualising it using CausaDB's built-in plotting tools.  plot_causal_graph(model)     ","version":"Next","tagName":"h2"},{"title":"Training a causal model​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#training-a-causal-model","content":" Now we can train the model on the loaded data. This will learn the causal relationships according to the structure defined above. This model will then be ready to query.  model.train(&quot;quickstart-heating-data&quot;)   ","version":"Next","tagName":"h2"},{"title":"Simulating actions​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#simulating-actions","content":" One of the common use cases unique to causal models is to simulate the effect of actions to see how they change the outcome. We can do this by setting the value of a variable to a specific value, and then seeing how the other variables change. This is useful for understanding the impact of actions/decisions/interventions, or for making predictions.  CausaDB is fully Bayesian. This has the advantage of allowing easily access the lower and upper bounds of the predictions as well as the expected (average) value, using the lower, upper, and median keys.  model.simulate_actions(actions={ &quot;heating&quot;: [46, 54], &quot;outdoor_temp&quot;: [12, 14] })[&quot;median&quot;]   \tday\toutdoor_temp\theating\tindoor_temp\tenergy0\t0.0\t12.0\t46.0\t16.533552\t599.737037 1\t0.0\t14.0\t54.0\t18.653116\t668.615622  It also works for single values, shown below using the lower key for demonstration.  model.simulate_actions(actions={ &quot;heating&quot;: 46, &quot;outdoor_temp&quot;: 12 })[&quot;lower&quot;]   \tday\toutdoor_temp\theating\tindoor_temp\tenergy0\t0.0\t12.0\t46.0\t15.687185\t593.513125  ","version":"Next","tagName":"h2"},{"title":"Finding the best action(s) to take​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#finding-the-best-actions-to-take","content":" Probably the most common use case is to find the best action to take. This could be a decision, an optimisation, or a recommendation. We can do this using the find_best_action method, which will find the action that achieves an outcome closest to a target value. This can be done while respecting constraints on other variables, or by setting the value of other variables to specific values using the fixed parameter.  best_actions = model.find_best_actions( targets={&quot;indoor_temp&quot;: 19}, actionable=[&quot;heating&quot;], fixed={&quot;outdoor_temp&quot;: 16} ) achieved_indoor_temp = set_heating(best_actions[&quot;heating&quot;].values, np.array([16]), noise=False)[0] print(f&quot;Best heating setting: {best_actions['heating'].values[0]:.1f}&quot;) print(f&quot;Indoor temperature achieved: {achieved_indoor_temp[0]:.1f}°C&quot;)   Best heating setting: 54.3 Indoor temperature achieved: 19.0°C   ","version":"Next","tagName":"h2"},{"title":"Finding the causal effects of a variable​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#finding-the-causal-effects-of-a-variable","content":" Another useful query is to find the causal effect of a variable on the others. This can be done using the causal_effect method, which will return the expected change in the target variable for a given change in the causal variable. This can be done for a range of values, or for a single value.  model.causal_effects({&quot;heating&quot;: [50, 55]}, fixed={&quot;outdoor_temp&quot;: 15})   \tmedian\tlower\tupperday\t0.000000\t0.000000\t0.000000 outdoor_temp\t0.000000\t0.000000\t0.000000 heating\t5.000000\t5.000000\t5.000000 indoor_temp\t1.295403\t1.135942\t1.454892 energy\t43.059056\t40.899418\t45.263778  ","version":"Next","tagName":"h2"},{"title":"Attributing causes of an outcome​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#attributing-causes-of-an-outcome","content":" A similar but distinct query to causal_effects is causal_attributions, which calculates how much each variable contributes to the value of an outcome variable. This can be useful for understanding the importance of different variables in a system. It's important to interpret these results in the context of the model, as the causal pathways can sometimes be indirect (through another variable).  causal_attributions = model.causal_attributions(&quot;energy&quot;) causal_attributions   \tenergyoutdoor_temp\t-25.130205 heating\t8.639587 indoor_temp\t2.948999  Causal attributions can also be plotted to visualise the impacts of various variables on the outcome. Positive-valued attributions mean that greater values of the cause node will positively affect the outcome node, and negative-valued attributions mean that greater values of the cause node will negatively affect the outcome node.  plot_causal_attributions(model, &quot;energy&quot;, normalise=False)     There is also a normalised version of the function to show the relative importance of each variable, scaled to sum to 1.  plot_causal_attributions(model, &quot;energy&quot;, normalise=True)     It's interesting to note that indoor temperature has a small effect on energy usage. This is because refrigeration units will work harder to maintain a lower temperature, and heating units will work harder to maintain a higher temperature. This is a good example of how causal models can capture these complex relationships.  ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"CausaDB Quickstart","url":"/docs/examples/causadb_quickstart#conclusion","content":" This has been a quick overview of some of the core features of CausaDB. For more information, please refer to the documentation or get in touch with us via email: causadb@causa.tech or our Slack community. ","version":"Next","tagName":"h2"},{"title":"Organisations","type":0,"sectionRef":"#","url":"/docs/guide/causadb/organisations","content":"Organisations CausaDB access is managed through organisations. An organisation is a group of users that share access to the same data and models. Billing is also handled at the organisation level. Access tokens (those beginning with cdb_) are associated with an organisation. When you create a new organisation, you will be given an access token that you can use to access the CausaDB API. Multiple tokens can be generated for a single organisation, and they can be revoked at any time. We recommend using a new token for each application or service that accesses CausaDB. Personal access tokens are also available for individual users. Organisation and token management are currently handled through the support team. Please contact us at causadb@causa.tech to create a new organisation or request a new token. note Additional organisation management features are in development and will be available soon. These features will allow you to manage your organisation, users, and tokens through a web interface.","keywords":"","version":"Next"},{"title":"Optimising Yield in Production Lines with CausaDB","type":0,"sectionRef":"#","url":"/docs/examples/use-cases/production_lines_optimise_yield","content":"","keywords":"","version":"Next"},{"title":"Setup​","type":1,"pageTitle":"Optimising Yield in Production Lines with CausaDB","url":"/docs/examples/use-cases/production_lines_optimise_yield#setup","content":" We won't go into the details of setting up CausaDB in this example. If you haven't already set up CausaDB, you can follow the instructions in the Quickstart Guide. You can visit the Github repository for this example to see the full code.  ","version":"Next","tagName":"h2"},{"title":"Data​","type":1,"pageTitle":"Optimising Yield in Production Lines with CausaDB","url":"/docs/examples/use-cases/production_lines_optimise_yield#data","content":" We'll be using a simulated dataset for this example. We'll keep the interpretation broad, as similar code can be applied to a wide range of production lines with minimal customisation.  The dataset contains the following columns:  Input_A, Input_B, Input_C: The input materials for the production line, this could be raw stock, chemicals, or components coming into the production line from another source.Setting_*: Configuration settings for the production line, these could be things like temperature, pressure, or speed settings for each machine at different points along the production line.Yield_*: The yield of the production line at different points, this could be the proportion of good products to bad products, or the proportion of raw materials that are converted into useful products at each stage of the production lineOutput: The final output of the production line, again, this could be the proportion of good products to bad products, or the proportion of raw materials that are converted into useful products at the end of the production line.  Each row in this dataset could represent an hour, a shift, a day, or whatever frequency the machine settings might be changed. It's possible that machine settings are changed far less frequently, in which case there may only be a few rows.  data = pd.read_csv('production_data.csv') data.head()   \tInput_A\tInput_B\tInput_C\tSetting_A1\tSetting_A2\tSetting_A3\tSetting_B1\tSetting_B2\tSetting_B3\tSetting_C1\tSetting_C2\tYield_A1\tYield_B1\tYield_A2\tYield_B2\tYield_C1\tYield_A3\tYield_B3\tYield_C2\tOutput0\t62.21\t91.48\t72.55\t0\t0.76\t0.53\t0.46\t1\t0.59\t0.66\t1\t0.72\t0.58\t0.71\t1\t0.4\t0.49\t1\t0.82\t0.89 1\t74\t124.91\t75.04\t0.72\t0.55\t0.43\t0\t0.59\t0.96\t0.52\t0.58\t0.41\t0.14\t0.32\t0.32\t0.03\t0.3\t0.71\t0.31\t0.69 2\t121.3\t121.1\t87.57\t0.38\t1\t1\t0\t0.1\t0.34\t0\t0.47\t0.81\t0.15\t1\t0.19\t0\t1\t0.16\t0.08\t0.71 3\t116.46\t115.3\t94.24\t1\t0.6\t1\t0.06\t0.64\t0.99\t0.02\t0.82\t0.49\t0.13\t0.48\t0.35\t0.02\t1\t0.8\t0.28\t0.85 4\t67.43\t145.29\t94.29\t0.8\t0.67\t1\t0.36\t0.74\t0.62\t0.69\t0.49\t0.2\t0.52\t0.63\t0.68\t0.71\t0.82\t0.98\t0.72\t0.92  ","version":"Next","tagName":"h2"},{"title":"Building a Causal Model​","type":1,"pageTitle":"Optimising Yield in Production Lines with CausaDB","url":"/docs/examples/use-cases/production_lines_optimise_yield#building-a-causal-model","content":" The complexity of production lines means that the causal graphs can be quite large, with many nodes and edges. Fortunately they can often be automatically extracted from schematics (as well as other data sources) like the one above programmatically. We've already done this and stored the nodes and edges as JSON files, so we can load them directly from file.  with open('nodes.json', 'r') as f: nodes = json.load(f) with open('edges.json', 'r') as f: edges = json.load(f) model = client.create_model(&quot;example-production-model&quot;) model.set_nodes(nodes) model.set_edges(edges) model.train(&quot;example-production-data&quot;)   ","version":"Next","tagName":"h2"},{"title":"Visualising the Model​","type":1,"pageTitle":"Optimising Yield in Production Lines with CausaDB","url":"/docs/examples/use-cases/production_lines_optimise_yield#visualising-the-model","content":" Using the built-in plotting tools in CausaDB, we can visualise the causal graph of the production line. This can be useful for manual checking and debugging. Here we'll set the style to flowchart, as this style is particularly useful for visualising production lines and other systems with a linear flow.  plot_causal_graph(model, style=&quot;flowchart&quot;, theme=&quot;dark&quot;, direction=&quot;LR&quot;)     Here we can see the causal relationships between different variables in the production line. The Setting_* nodes are the configuration settings for the machines and processes in the production line. These settings are modifiable and can be used to optimise the production line for maximum yield.  ","version":"Next","tagName":"h2"},{"title":"Find optimal machine configurations to maximise yield​","type":1,"pageTitle":"Optimising Yield in Production Lines with CausaDB","url":"/docs/examples/use-cases/production_lines_optimise_yield#find-optimal-machine-configurations-to-maximise-yield","content":" To find the best set of configuration settings to set, we can use the find_best_actions function to find the combination of configuration settings that will maximise yield. In this case our goal will be solely to maximise the output yield, but in real-world scenarios you may want to balance multiple objectives, such as minimising energy usage or waste production while maximising yield.  optimal_settings = model.find_best_actions( targets={&quot;Output&quot;: &quot;maximise&quot;}, actionable=[&quot;Setting_A1&quot;, &quot;Setting_A2&quot;, &quot;Setting_A3&quot;, &quot;Setting_B1&quot;, &quot;Setting_B2&quot;, &quot;Setting_B3&quot;, &quot;Setting_C1&quot;, &quot;Setting_C2&quot;], )   We can then view the optimal_settings object to see what configuration settings are recommended.  optimal_settings.round(2).T   \t0Setting_A1\t0.55 Setting_A2\t0.85 Setting_A3\t0.98 Setting_B1\t0.56 Setting_B2\t0.59 Setting_B3\t0.74 Setting_C1\t0.55 Setting_C2\t0.7  This set of configuration settings can then be applied to the machines in the production line to maximise yield. More precise control for specific scenarios could be achieved by also setting some of the variable inputs to the process using fixed in the find_best_actions function. But in this example we are optimising across a range of input scenarios that match the data we have.  If running find_best_actions in multi-target mode, the multiple targets can be weighted to reflect the relative importance of each objective using the target_importance parameter. We'll show an example of using this feature in practice in a future example.  note We could go even further here. In this example find_best_actions is being used to find the best configuration settings for the production line over multiple scenarios (usually by day or shift). However, we could also use it to find the best configuration settings for a specific scenario, by setting the fixed parameter to the specific input values for that scenario. This would allow us to optimise the production line for a specific set of input values, rather than across a range of values, giving much more precise control and even greater improvements. However this also requires being able to set the machine settings in real-time, which may not be possible in all cases. If it is possible, then this can be a very powerful tool for improving yield and reducing waste.  ","version":"Next","tagName":"h2"},{"title":"Causal Inference","type":0,"sectionRef":"#","url":"/docs/guide/causal-ai/causal-inference","content":"Causal Inference Causal inference is the process of determining the causal effect of one variable on another (i.e. how much one variable causes another). This is different from the standard approach of just seeing if two variables are correlated. It's important because most business questions are causal: they're about what action/decision/intervention you want to take, optimisations, or prediction in a changing world, or just understanding why something has happened. For all of this only causal methods will give you the answer you want. Causal inference is a fundamental problem in statistics and machine learning, and it is essential for making decisions based on data. However, much of the existing tooling for causal inference is highly technical and difficult to understand for anyone who is not a causal AI expert. Furthermore, many of the existing tools are focused on inferring causal relationships rather than estimating the outcomes of actions, which is critical for decision-making and AI that can reason. CausaDB is designed to make causal inference accessible to everyone, by providing a simple and intuitive interface for estimating causal effects and making data-driven decisions, without the typical knowledge burden that comes with causal AI. It also goes beyond the limitations of traditional causal inference methods by allowing users to simulate the effects of actions, optimise decisions based on causal models, and explain how AI models make decisions.","keywords":"","version":"Next"},{"title":"Explain the causes of yield​","type":1,"pageTitle":"Optimising Yield in Production Lines with CausaDB","url":"/docs/examples/use-cases/production_lines_optimise_yield#explain-the-causes-of-yield","content":" Unlike standard AI/ML models that only understand correlations, causal models can explain the true causes of an outcome. We can use the causal_attributions function to find the causes of yield Output and their relative magnitudes.  plot_causal_attributions(model, &quot;Output&quot;)     Unlike standard AI models, causal attribution plots show the causal effect of making a tweak to one of the input factors. This is important in systems such as production lines where there are long chains of causality as machines feed their outputs into each other sequentially. Standard AI models usually attribute most cause to the factors nearest to the outcome node because that is where the signal is strongest. Causal models are the only way to accurately attribute causality and make correct optimisation decisions. This is import both for explainability and for making sure that the optimisation decisions are actually correct.  ","version":"Next","tagName":"h2"},{"title":"Comparison with non-causal models​","type":1,"pageTitle":"Optimising Yield in Production Lines with CausaDB","url":"/docs/examples/use-cases/production_lines_optimise_yield#comparison-with-non-causal-models","content":" To show why it's vital to use causal models for this kind of problem, we'll compare the results of the causal model with a neural network model, but the same principles apply to all non-causal models, LLMs included. We won't go into the details of training the neural network model here, but you can see the full code in the Github repository. The model is trained on the same data as the causal model, and then an optimisation is to run to find the best configuration settings to maximise yield on the production line. You can see the results below:    The causal model achieves a higher yield of about 10% above the original, whereas the neural network model actually performs worse than the baseline, despite a strong performance on the test set. This is because the neural network model is unable to capture the causal relationships between the variables in the system, and so is unable to make accurate predictions about the effects of changing the configuration settings. This is a problem that would usually only be discovered after the model has been deployed and is making decisions in the real world, which could be extremely costly and even dangerous.  ","version":"Next","tagName":"h2"},{"title":"Summary​","type":1,"pageTitle":"Optimising Yield in Production Lines with CausaDB","url":"/docs/examples/use-cases/production_lines_optimise_yield#summary","content":" In this example, we've shown how CausaDB can be used to optimise yield on a production line. By modelling the causal relationships between machines and their settings, we can create a kind of causal twin of the real world system. This can be used to find the optimal configuration settings required to maximise yield. We can also use the causal model to explain the causes of yield and their relative magnitudes.  If you're interested in learning more about how CausaDB can be used to optimise production lines or complex systems, please get in touch with us at causadb@causa.tech. ","version":"Next","tagName":"h2"},{"title":"Latent Confounding","type":0,"sectionRef":"#","url":"/docs/guide/causal-ai/latent-confounding","content":"Latent Confounding Latent confounding is a common problem in causal inference. It occurs when there is an unobserved variable that affects two or more observed variables. This can generate the impression of a causal relationship between the observed variables, when in fact the relationship is spurious and is due to this unobserved common cause. Other causal inference methods such as standard regression models, DoubleML, etc are typically unable to handle latent confounding, as they rely on the assumption that all confounders are observed. However, CausaDB uses techniques to simulate the effects of unobserved confounders, allowing you to estimate causal effects even in the presence of latent confounding. This can be used to stress-test your causal models and understand the robustness of your conclusions and recommendations.","keywords":"","version":"Next"},{"title":"Model Structure","type":0,"sectionRef":"#","url":"/docs/guide/causal-ai/model-structure","content":"","keywords":"","version":"Next"},{"title":"Defining a Causal Graph​","type":1,"pageTitle":"Model Structure","url":"/docs/guide/causal-ai/model-structure#defining-a-causal-graph","content":" When building a causal AI model, the first step is to define the nodes and edges of the causal graph. This can be done manually by specifying the nodes and edges in code, or by using a graphical interface to build the graph visually. Our model builder tool allows you to drag and drop nodes and edges (arrows) to define the structure of your model, and then export the model to code for training and querying: CausaDB Model Builder.  Check out the video below for a quick overview of defining causal graphs.    ","version":"Next","tagName":"h2"},{"title":"Learning a Causal Graph from Data​","type":1,"pageTitle":"Model Structure","url":"/docs/guide/causal-ai/model-structure#learning-a-causal-graph-from-data","content":" An alternative to manually defining the causal graph is to learn the structure of the graph from data. This can be done using causal discovery algorithms, which infer the causal relationships between variables from observational data. These algorithms can be limited by the assumptions they make about the data, and may not always be able to accurately infer the true causal relationships. However, they can often be a useful tool for exploring the causal relationships in your data and generating hypotheses for further investigation.  note We have some exciting updates coming soon to CausaDB that will make it easier to learn causal graphs from data, in a way that improves on current methods. Stay tuned for more information!  ","version":"Next","tagName":"h2"},{"title":"Feedback Loops in Time Series​","type":1,"pageTitle":"Model Structure","url":"/docs/guide/causal-ai/model-structure#feedback-loops-in-time-series","content":" Time series data are a common use case for causal AI models, as many real-world systems are dynamic and evolve over time. But as mentioned earlier, feedback loops in causal graphs are not allowed. When working with time series data, this problem is solved by assigning variables to different time points. For example a variable x at time t can be represented as x_t, and the causal relationship between x_t and x_{t-1} can be represented as an edge in the causal graph. This allows the model to capture the temporal relationships between variables without introducing loops in the graph.  note We're currently working on adding explicit support for time series data in CausaDB, including built-in functions for handling time series data and temporal relationships in the causal graph. Stay tuned for updates on this feature! ","version":"Next","tagName":"h2"},{"title":"Model Querying","type":0,"sectionRef":"#","url":"/docs/guide/causadb/querying","content":"","keywords":"","version":"Next"},{"title":"Simulate actions​","type":1,"pageTitle":"Model Querying","url":"/docs/guide/causadb/querying#simulate-actions","content":" Simulating actions is a common use case for causal models. You can simulate the effects of setting a node or set of nodes to a specific value, and then see how the remaining variables change. Only nodes downstream of the actionable nodes will change, as causality cannot act backwards. This function is useful for understanding the impact of taking actions, or for making predictions.  Example:  model.simulate_actions(actions={ &quot;heating&quot;: 46, &quot;outdoor_temp&quot;: 13 })[&quot;median&quot;]   This will return the expected values of all nodes in the model when the heating node is set to 46 and the outdoor_temp node is set to 13.  This is a useful function for making predictions or understanding the impact of potential interventions and actions.  ","version":"Next","tagName":"h2"},{"title":"Find best actions​","type":1,"pageTitle":"Model Querying","url":"/docs/guide/causadb/querying#find-best-actions","content":" As well as simulating actions, another common use case is to find the best actions to take in order to achieve a specific goal. This is done by optimising the values of actionable node for a given target node. This can be done while unactionable nodes are fixed to specific values or allowed to vary.  Example:  best_actions = model.find_best_actions( targets={&quot;indoor_temp&quot;: 19}, actionable=[&quot;heating&quot;], fixed={&quot;outdoor_temp&quot;: 16} )   This will return the optimal value for the heating node in order to achieve an indoor_temp of 19, while the outdoor_temp is fixed at 16.  This is a useful function for making recommendations or optimising decisions.  ","version":"Next","tagName":"h2"},{"title":"Causal effects​","type":1,"pageTitle":"Model Querying","url":"/docs/guide/causadb/querying#causal-effects","content":" Causal effects are the effects of changing a node or set of nodes on the other nodes in the model. This function allows you to understand the change in outcomes when an action is taken. Causal effects are always calculated between the current state of the model and the state after the action is taken. This is akin to regression coefficients or marginal effects in classical causal inference methods, but with the added benefit of being able to calculate the effects of multiple actions simultaneously.  Example:  model.causal_effects({&quot;heating&quot;: [50, 55]}, fixed={&quot;outdoor_temp&quot;: 15})   \tmedian\tlower\tupperday\t0.000000\t0.000000\t0.000000 outdoor_temp\t0.000000\t0.000000\t0.000000 heating\t5.000000\t5.000000\t5.000000 indoor_temp\t1.295403\t1.135942\t1.454892 energy\t43.059056\t40.899418\t45.263778  In this example, the causal effects of setting the heating node to 55 from 50 are calculated, while the outdoor_temp node is fixed at 15. This will return the expected change in all other nodes in the model. Downstream nodes such as outdoor_temp and day will not change, as they are not affected by the heating node.  ","version":"Next","tagName":"h2"},{"title":"Causal attribution​","type":1,"pageTitle":"Model Querying","url":"/docs/guide/causadb/querying#causal-attribution","content":" Causal attribution is the process of attributing the value of an outcome node to the values of the input nodes. This function allows you to understand the importance of different nodes in the model for a particular outcome node. It is similar to feature importance in machine learning models, but with a causal interpretation.  Example:  causal_attributions = model.causal_attributions(&quot;energy&quot;) causal_attributions   \tenergyoutdoor_temp\t-25.130205 heating\t8.639587 indoor_temp\t2.948999  In this example, the causal attributions of the energy node are calculated. This will return the expected contribution of each node to the value of the energy node. It is important to interpret these results in the context of the model, as the causal pathways can sometimes be indirect.  note We're working on adding new explainability features to CausaDB that go beyond causal attributions, so stay tuned for more updates. ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/guide/getting-started/installation","content":"","keywords":"","version":"Next"},{"title":"CLI/Python interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#clipython-interface","content":" CausaDB is managed through a CLI tool that can be installed through pip. We also provide Python, Node.js, and REST API interfaces. The CLI tool is bundled with the Python interface, so should be installed regardless of whether you want to use the Python interface.  ","version":"Next","tagName":"h2"},{"title":"Installing the CLI/Python interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#installing-the-clipython-interface","content":" tip Using Conda? We recommend using the pip package manager to install the CLI and Python interface. You can install pip in Conda using conda install pip.  The CLI (and bundled Python interface) can be installed from PyPI using:  pip install causadb   Once the CLI is installed, you'll need to set it up with your access credentials. You can do this by running the login command:  causadb account setup   Follow the instructions in the CLI to link it with your cloud account.  ","version":"Next","tagName":"h3"},{"title":"Authenticating the Python interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#authenticating-the-python-interface","content":" When using the Python interface on a remote instance (such as a server or Colab notebook) you'll need to authenticate within the Python interface. This is done when you set up the client:  import causadb client = causadb.CausaDB(token=&quot;&lt;YOUR_TOKEN_HERE&gt;&quot;)   ","version":"Next","tagName":"h3"},{"title":"Node.js interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#nodejs-interface","content":" warning The Node.js interface is under active development and is not yet feature-complete. Do not use this interface unless you are a developer or beta tester.  The Node.js client is intended for use with JavaScript and Typescript, and is ideal for server-side (not client-side) software.  ","version":"Next","tagName":"h2"},{"title":"Installing the Node.js interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#installing-the-nodejs-interface","content":" The Node.js client is available on npm, and can be installed in the standard way:  npm install causadb   ","version":"Next","tagName":"h3"},{"title":"Authenticating the Node.js interface​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#authenticating-the-nodejs-interface","content":" To authenticate the Node.js interface, run:  import { CausaDB } from &quot;causadb&quot;; CausaDB.setToken(&quot;AHFDOIEUBDKSDVXHFSKH&quot;);   ","version":"Next","tagName":"h3"},{"title":"Next steps​","type":1,"pageTitle":"Installation","url":"/docs/guide/getting-started/installation#next-steps","content":" Once you've set up your CLI and whichever interface you're working with, it's time to get started working with causal AI on the cloud. Follow our quickstart guide to get started. ","version":"Next","tagName":"h2"},{"title":"Remove Data","type":0,"sectionRef":"#","url":"/docs/reference/api/data/delete__data_data_name","content":"Remove Data Tags: Data Method: DELETE Endpoint: https://api.causadb.com/v1/data/{data_name} Description: Removes a dataset from the organization. This operation cannot be undone. Parameters: data_name (path): Data name Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/guide/getting-started/intro","content":"","keywords":"","version":"Next"},{"title":"Why do I need causal AI?​","type":1,"pageTitle":"Introduction","url":"/docs/guide/getting-started/intro#why-do-i-need-causal-ai","content":" Standard AI algorithms are pattern-matching engines that are great at finding patterns in data, but they have no concept of cause and effect. This is a major problem when we try to use standard AI models (LLMs, neural nets, XGBoost, etc) to inform decision-making. Without understanding cause and effect, these other algorithms confuse correlation for causation and can make inefficient and at worst damaging recommendations. Importantly, because standard AI creates its own world-model based on correlations, it often fails when deployed in the real world, while causal AI works in deployment. See Why you need causal AI in deployment for an example.  Causal AI models are built from the ground up to capture causal structures. This gives them an understanding of cause and effect, so they can be trusted to reason and make data-driven decisions and optimisations. Until now, causal AI has largely been an academic pursuit with limited adoption in the real world. CausaDB simplifies the process of building causal models, removing the deep knowledge burden that typically comes with causal AI. The platform is designed to get causal AI models out of the lab and into production with ease.  ","version":"Next","tagName":"h2"},{"title":"What is CausalOps?​","type":1,"pageTitle":"Introduction","url":"/docs/guide/getting-started/intro#what-is-causalops","content":" CausalOps is an extension of the concept of MLOps to causal AI. Standard MLOps practices alone aren't enough for productionising causal AI models, so CausalOps bridges the gap to make it simple to build and maintain causal workflows. CausaDB is the only platform that makes CausalOps as easy as a few lines of code.  ","version":"Next","tagName":"h2"},{"title":"Why do I need CausaDB?​","type":1,"pageTitle":"Introduction","url":"/docs/guide/getting-started/intro#why-do-i-need-causadb","content":" Managing AI models in development is hard enough, and deploying AI is even harder. Causal AI models have different requirements to standard AI models, and popular workflows and software are not designed or suited to causal AI. This leads to further resistance in adopting causal AI and stops organisations from being able to benefit from it.  We built CausaDB to solve this problem. CausaDB handles model development workflows, deployment pipelines, versioning, quality assurance, and infrastructure orchestration and management in a single, simple framework. Your team can start deploying causal AI in minutes instead of months.  ","version":"Next","tagName":"h2"},{"title":"Want to get started?​","type":1,"pageTitle":"Introduction","url":"/docs/guide/getting-started/intro#want-to-get-started","content":" To get started with CausaDB, get in touch with our team via email: causadb@causa.tech or through our Slack community. If you already have your access credentials, follow the installation instructions in this documentation site. ","version":"Next","tagName":"h2"},{"title":"Delete Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/delete__models_model_name","content":"Delete Model Tags: Models Method: DELETE Endpoint: https://api.causadb.com/v1/models/{model_name} Description: No description provided Parameters: model_name (path): The name of the model to delete Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Add Data","type":0,"sectionRef":"#","url":"/docs/reference/api/data/post__data_data_name","content":"Add Data Tags: Data Method: POST Endpoint: https://api.causadb.com/v1/data/{data_name} Description: Adds a dataset to the organization. Parameters: data_name (path): Data name Request Body: Description: Data Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"List Data","type":0,"sectionRef":"#","url":"/docs/reference/api/data/get__data","content":"List Data Tags: Data Method: GET Endpoint: https://api.causadb.com/v1/data Description: List all data sources in the organization. Organization is determined by the token. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"Detach Data From A Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/delete__models_model_name_detach","content":"Detach Data From A Model Tags: Models Method: DELETE Endpoint: https://api.causadb.com/v1/models/{model_name}/detach Description: Detaches data from a model. Parameters: model_name (path): The name of the model to create Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Create Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name","content":"Create Model Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name} Description: Creates a new causal model with a given configuration and data. Parameters: model_name (path): The name of the model to create Request Body: Description: The model configuration in JSON format Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"List Models","type":0,"sectionRef":"#","url":"/docs/reference/api/models/get__models","content":"List Models Tags: Models Method: GET Endpoint: https://api.causadb.com/v1/models Description: Returns a list of the names of all models. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"Attach Data To A Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_attach_data_name","content":"Attach Data To A Model Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/attach/{data_name} Description: Attaches data to a model. Parameters: model_name (path): The name of the model to createdata_name (path): The name of the data to use for training Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Get Model Information","type":0,"sectionRef":"#","url":"/docs/reference/api/models/get__models_model_name","content":"Get Model Information Tags: Models Method: GET Endpoint: https://api.causadb.com/v1/models/{model_name} Description: Returns details about a model. Parameters: model_name (path): The name of the model to get information about Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Causal Attributions","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_causal-attributions","content":"Causal Attributions Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/causal-attributions Description: Calculate the causal attributions of each node for a specified outcome Parameters: model_name (path): The name of the model to query Request Body: Description: Parameters of the query. outcome is the outcome node, and normalise is a boolean to normalise the results. Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Causal Effects","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_causal-effects","content":"Causal Effects Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/causal-effects Description: Calculate the causal effects of the given actions on the model. Parameters: model_name (path): The name of the model to query Request Body: Description: Causal nodes and their values or the name of the node Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Simulate Actions","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_simulate-actions","content":"Simulate Actions Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/simulate-actions Description: Simulate action(s) using a trained model. Parameters: model_name (path): The name of the model to query Request Body: Description: The query to run against the model Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Account Details","type":0,"sectionRef":"#","url":"/docs/reference/api/system/get__account","content":"Account Details Tags: System Method: GET Endpoint: https://api.causadb.com/v1/account Description: Returns details about the account. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"Find Best Actions","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_find-best-actions","content":"Find Best Actions Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/find-best-actions Description: Find the set of best actions to achieve a desired outcome, using a trained model. Parameters: model_name (path): The name of the model to query Request Body: Description: No description Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Train A Model","type":0,"sectionRef":"#","url":"/docs/reference/api/models/post__models_model_name_train","content":"Train A Model Tags: Models Method: POST Endpoint: https://api.causadb.com/v1/models/{model_name}/train Description: Train a model. Parameters: model_name (path): The name of the model to train Responses: 200: Successful Response422: Validation Error","keywords":"","version":"Next"},{"title":"Health","type":0,"sectionRef":"#","url":"/docs/reference/api/system/get__health","content":"Health Tags: System Method: GET Endpoint: https://api.causadb.com/v1/health Description: Checks the health of the system. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"Version","type":0,"sectionRef":"#","url":"/docs/reference/api/system/get__version","content":"Version Tags: System Method: GET Endpoint: https://api.causadb.com/v1/version Description: Returns the version of the API in SemVer. Responses: 200: Successful Response","keywords":"","version":"Next"},{"title":"account remove","type":0,"sectionRef":"#","url":"/docs/reference/cli/account_remove","content":"account remove Remove CausaDB account from this device Usage: $ causadb account remove [OPTIONS] Options: --help: Show this message and exit.","keywords":"","version":"Next"},{"title":"account","type":0,"sectionRef":"#","url":"/docs/reference/cli/account","content":"account Manage account Usage: $ causadb account [OPTIONS] COMMAND [ARGS]... Options: --help: Show this message and exit. Commands: remove: Remove CausaDB account from this devicesetup: Set up a CausaDB account on this device","keywords":"","version":"Next"},{"title":"Smart Building Energy Optimisation","type":0,"sectionRef":"#","url":"/docs/examples/use-cases/causadb_heating","content":"","keywords":"","version":"Next"},{"title":"Background​","type":1,"pageTitle":"Smart Building Energy Optimisation","url":"/docs/examples/use-cases/causadb_heating#background","content":" Large commercial buildings are often so large that they require pre-heating and pre-cooling to achieve an appropriate temperature for either the occupants or the equipment inside. These buildings can be anything from office buildings, warehouses, or even GPU data centers.  However, setting the right HVAC system settings is challenging because it requires predicting the future temperature and energy usage of the building. Current approaches either use simple heuristics or machine learning models to predict the future temperature and energy usage. In this demo, we'll show how these approaches fail to provide accurate predictions and waste both energy and money.  Before we get started, we'll import the necessary libraries and set up some global variables.  from causadb import CausaDB from causadb.examples.heating import get_heating_dataset, set_heating, calculate_wasted_heating_cost import numpy as np import pandas as pd import os from sklearn.model_selection import train_test_split import xgboost as xgb import plotly.graph_objects as go from tqdm import tqdm from google.colab import userdata colors = ['#15C7B8', '#B13CA0', '#D3D3D3', '#808080'] background_color = '#1b1917' np.random.seed(42)   ","version":"Next","tagName":"h2"},{"title":"Dataset​","type":1,"pageTitle":"Smart Building Energy Optimisation","url":"/docs/examples/use-cases/causadb_heating#dataset","content":" The usual approach to solving the problem of choosing the correct HVAC settings for a building is to use a historical dataset relating to the building. The dataset might usually contain the following columns:  day: The day of the year, indexed from 1 to 365outdoor_temp: The temperature outside the buildingindoor_temp: The temperature inside the buildingenergy: The overall energy usage of the buildingheating: The heating setting of the HVAC systemetc.  In this demo we'll use a synthetic dataset. This allows us to simulate the impact of taking actions by changing the HVAC settings and observing the impact on the indoor temperature. This is usually not possible in a real-world dataset, and is the reason that standard AI/ML tools fail to solve this problem.  First let's load in our dataset.  data = get_heating_dataset() data.head()   \tday\toutdoor_temp\theating\tindoor_temp\tenergy0\t0\t14.50\t56.0\t19.25\t685.0 1\t1\t13.90\t59.0\t19.26\t708.0 2\t2\t14.72\t56.0\t19.38\t666.0 3\t3\t15.63\t53.0\t17.81\t671.0 4\t4\t13.90\t57.0\t19.88\t700.0  In this dataset, outdoor temperature fluctuates throughout the year, which means that the building will require different heating and cooling settings to maintain a constant indoor temperature.  fig = go.Figure() # Create line plots fig.add_trace(go.Scatter(y=data[&quot;outdoor_temp&quot;], x=data[&quot;day&quot;], mode='lines', name='Outdoor temperature', line_width=2, line_color=colors[2])) fig.add_trace(go.Scatter(y=data[&quot;indoor_temp&quot;], x=data[&quot;day&quot;], mode='lines', name='Indoor temperature', line_width=2, line_color=colors[3])) # Update axes properties fig.update_layout( template='plotly_dark', paper_bgcolor=background_color, # Background color for the whole figure plot_bgcolor=background_color, # Background color for the plotting area xaxis_title=&quot;Day&quot;, # X-axis label yaxis_title=&quot;Temperature (°C)&quot;, # Y-axis label title=&quot;Outdoor/indoor temperatures over a year&quot;, # Title of the plot font=dict(family=&quot;Helvetica&quot;, size=18, color=&quot;white&quot;), # Set the font here xaxis=dict(showgrid=False), # Increase X-axis label size yaxis=dict(showgrid=True), # Increase Y-axis label size width=800, # Set the figure width height=500, # Set the figure height ) # Show plot fig.show(renderer=&quot;png&quot;)     ","version":"Next","tagName":"h2"},{"title":"Standard AI Approach​","type":1,"pageTitle":"Smart Building Energy Optimisation","url":"/docs/examples/use-cases/causadb_heating#standard-ai-approach","content":" Now we'll take a standard approach to solving this problem by training an XGBoost model to predict the HVAC setting from the outdoor temperature and desired indoor temperature. We'll leave the energy usage out of the model for now, but this would cause additional problems in a real-world scenario (we won't go into this here).  # Train an XGBoost model to predict heating from outdoor_temp, indoor_temp, and energy X = data[['outdoor_temp', 'indoor_temp']].values y = data['heating'].values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) xgb_model = xgb.XGBRegressor() xgb_model.fit(X_train, y_train) y_pred = xgb_model.predict(X_test) # Plot with plotly fig = go.Figure() # Create scatter plot fig.add_trace(go.Scatter(x=y_test, y=y_pred, mode='markers', name='Test performance', marker=dict(size=10, color=colors[1], opacity=0.8))) # Create line plot fig.add_trace(go.Scatter(x=[np.min(y_test), np.max(y_test)], y=[np.min(y_pred), np.max(y_pred)], mode='lines', name=&quot;Ideal&quot;, line=dict(color=&quot;white&quot;, width=3, dash='dash'))) # Update axes properties fig.update_layout( template='plotly_dark', paper_bgcolor=background_color, # Background color for the whole figure plot_bgcolor=background_color, # Background color for the plotting area xaxis_title=&quot;True heating&quot;, # X-axis label yaxis_title=&quot;Predicted heating&quot;, # Y-axis label title=&quot;XGBoost test set performance: Predicted vs true heating&quot;, # Title of the plot font=dict(family=&quot;Helvetica&quot;, size=18, color=&quot;white&quot;), # Set the font here xaxis=dict(showgrid=False), # Increase X-axis label size yaxis=dict(showgrid=True), # Increase Y-axis label size width=800, # Set the figure width height=500, # Set the figure height ) # Show plot fig.show(renderer=&quot;png&quot;)     The model performs well on the test set, so let's see how it performs in the &quot;real&quot; world. We'll simulate outdoor temperature data for another year, set a target indoor temperature, and use the model to predict the HVAC settings.  outdoor_temp_test = 12 + np.sin(np.linspace(0, 4*np.pi, 365)) + np.random.normal(0, 0.5, 365) # Plot with plotly fig = go.Figure() # Create scatter plot fig.add_trace(go.Scatter(x=np.arange(365), y=outdoor_temp_test, mode='lines', name='Outdoor temperature', line=dict(color=colors[2], width=2))) # Update axes properties fig.update_layout( template='plotly_dark', paper_bgcolor=background_color, # Background color for the whole figure plot_bgcolor=background_color, # Background color for the plotting area xaxis_title=&quot;Day&quot;, # X-axis label yaxis_title=&quot;Outdoor temperature&quot;, # Y-axis label title=&quot;Outdoor temperature over a year (Test data)&quot;, # Title of the plot font=dict(family=&quot;Helvetica&quot;, size=18, color=&quot;white&quot;), # Set the font here xaxis=dict(showgrid=False), # Increase X-axis label size yaxis=dict(showgrid=True), # Increase Y-axis label size width=800, # Set the figure width height=500, # Set the figure height ) # Show plot fig.show(renderer=&quot;png&quot;)     ","version":"Next","tagName":"h2"},{"title":"How does XGBoost perform in the real world?​","type":1,"pageTitle":"Smart Building Energy Optimisation","url":"/docs/examples/use-cases/causadb_heating#how-does-xgboost-perform-in-the-real-world","content":" We can use XGBoost to generate recommendations, and see how well it performs in the real world using simulated interventions.  target_indoor_temp = 18 # Predict heating for outdoor_temp = current_outdoor_temp, indoor_temp = target_temp day_idx = np.arange(0, data.shape[0], data.shape[0]//20) X = np.stack([outdoor_temp_test, np.repeat(target_indoor_temp, repeats=len(outdoor_temp_test))], axis=1) heating_pred_xgb = xgb_model.predict(X) indoor_temp_xgb, energy_xgb = set_heating(heating_pred_xgb, outdoor_temp_test, noise=False) fig = go.Figure() # Create line plots fig.add_trace(go.Scatter(y=indoor_temp_xgb, x=day_idx, mode='lines+markers', name='XGBoost', line_width=2, line_color=colors[1])) # Add target temperature line fig.add_shape(type='line', x0=day_idx[0], y0=target_indoor_temp, x1=day_idx[-1], y1=target_indoor_temp, line=dict(color='white', width=2, dash='dash')) # Update axes properties fig.update_layout( template='plotly_dark', paper_bgcolor=background_color, # Background color for the whole figure plot_bgcolor=background_color, # Background color for the plotting area xaxis_title=&quot;Day&quot;, # X-axis label yaxis_title=&quot;Indoor temperature (°C)&quot;, # Y-axis label title=&quot;Indoor temperature achieved (XGBoost)&quot;, # Title of the plot font=dict(family=&quot;Helvetica&quot;, size=18, color=&quot;white&quot;), # Set the font here xaxis=dict(showgrid=False), # Increase X-axis label size yaxis=dict(showgrid=True), # Increase Y-axis label size width=800, # Set the figure width height=500, # Set the figure height ) # Show plot fig.show(renderer=&quot;png&quot;)     ","version":"Next","tagName":"h2"},{"title":"How does CausaDB solve this issue?​","type":1,"pageTitle":"Smart Building Energy Optimisation","url":"/docs/examples/use-cases/causadb_heating#how-does-causadb-solve-this-issue","content":" CausaDB uses causal AI to understand the impact of interventions on the system. This means it can be trusted to provide accurate recommendations for HVAC settings.  To fit a CausaDB model, we'll first initialise the client using the token key provided to all customers. In this case we'll load it from environment variables for security.  # Load the CausaDB token and initialise the client. client = CausaDB(token=userdata.get(&quot;CAUSADB_TOKEN&quot;))   Fitting a CausaDB model can be done in a few lines of code. The key steps are:  Register a dataset with the CausaDB cloudDefine the model structure (how the variables are connected to each other)Fit the model to the dataset  # Register data with CausaDB client \\ .add_data(&quot;example-heating-data&quot;) \\ .from_pandas(data) # Define a causal model (can also be done in the UI) model = client.create_model(&quot;example-heating-model&quot;) model.set_nodes([&quot;outdoor_temp&quot;, &quot;heating&quot;, &quot;indoor_temp&quot;, &quot;energy&quot;]) model.set_edges([ (&quot;outdoor_temp&quot;, &quot;heating&quot;), (&quot;outdoor_temp&quot;, &quot;indoor_temp&quot;), (&quot;heating&quot;, &quot;indoor_temp&quot;), (&quot;heating&quot;, &quot;energy&quot;), (&quot;indoor_temp&quot;, &quot;energy&quot;) ]) # Train the model on example-heating-data model.train(&quot;example-heating-data&quot;) print(f&quot;Model status: {model.status()}&quot;)   Model status: trained   With the CausaDB model trained, then we can use it to generate recommendations for HVAC settings. The find_best_action function will return the best action to take in order to achieve a target outcome.  current_outdoor_temp = 16 best_actions = model.find_best_actions( targets={&quot;indoor_temp&quot;: target_indoor_temp}, actionable=[&quot;heating&quot;], fixed={&quot;outdoor_temp&quot;: current_outdoor_temp} ) best_actions   \theating0\t50.154196  We can then use the recommended best actions with the set_heating function from our example data generator to see what happens when we take actions in the &quot;real&quot; world.  achieved_indoor_temp = set_heating(best_actions[&quot;heating&quot;].values, np.array([current_outdoor_temp]), noise=False)[0] print(f&quot;Best heating setting: {best_actions['heating'].values[0]:.2f}&quot;) print(f&quot;Indoor temperature achieved: {achieved_indoor_temp[0]:.2f}°C&quot;)   Best heating setting: 50.15 Indoor temperature achieved: 17.94°C   Now we'll compare the recommendations made by the CausaDB model with the XGBoost model, and see how well the two approaches perform in the real world over the test year.  # Find best actions using CausaDB (do it for only a subsample across days because optimisation is expensive) best_actions_causadb = [] outdoor_temps_causadb = [] # for i in day_idx: # Replace with tqdm for i in tqdm(day_idx): best_actions = model.find_best_actions( targets={&quot;indoor_temp&quot;: target_indoor_temp}, actionable=[&quot;heating&quot;], fixed={&quot;outdoor_temp&quot;: outdoor_temp_test[i]} ) best_actions_causadb.append(best_actions.values[0]) outdoor_temps_causadb.append(outdoor_temp_test[i]) best_actions_causadb = np.array(best_actions_causadb).flatten() outdoor_temps_causadb = np.array(outdoor_temps_causadb).flatten() indoor_temp_causadb, energy_causadb = set_heating(best_actions_causadb, outdoor_temps_causadb, noise=False)   100%|██████████| 21/21 [00:15&lt;00:00, 1.34it/s]   Let's plot the recommendations from CausaDB against the standard AI approach.   fig = go.Figure() # Create line plots fig.add_trace(go.Scatter(y=indoor_temp_causadb, x=day_idx, mode='lines+markers', name='CausaDB', line_width=2, line_color=colors[0])) fig.add_trace(go.Scatter(y=indoor_temp_xgb, x=day_idx, mode='lines+markers', name='XGBoost', line_width=2, line_color=colors[1])) # Add target temperature line fig.add_shape(type='line', x0=day_idx[0], y0=target_indoor_temp, x1=day_idx[-1], y1=target_indoor_temp, line=dict(color='white', width=2, dash='dash')) # Update axes properties fig.update_layout( template='plotly_dark', paper_bgcolor=background_color, # Background color for the whole figure plot_bgcolor=background_color, # Background color for the plotting area xaxis_title=&quot;Day&quot;, # X-axis label yaxis_title=&quot;Indoor temperature (°C)&quot;, # Y-axis label font=dict(family=&quot;Helvetica&quot;, size=18, color=&quot;white&quot;), # Set the font here xaxis=dict(showgrid=False), # Increase X-axis label size yaxis=dict(showgrid=True), # Increase Y-axis label size width=800, # Set the figure width height=500, # Set the figure height ) # Show plot fig.show(renderer=&quot;png&quot;)     We can see that the CausaDB model performs well in the real world, maintaining a constant indoor temperature close to the target. The XGBoost model, despite performing well on the test data, fails to maintain a constant indoor temperature near to the target. This is because the underlying distribution of the data are different to the training data when interventions are made in the real world. This is why standard AI/ML tools perform poorly for predicting the outcomes of actions in the real world.  # Mean absolute error from target indoor temp mae = np.mean(np.abs(data[&quot;indoor_temp&quot;] - target_indoor_temp)) print(f'Mean absolute error in original data (Human): {mae:.2f}°C') # Mean absolute error from target indoor temp with recommended HVAC mae = np.mean(np.abs(indoor_temp_xgb - target_indoor_temp)) print(f'Mean absolute error with recommended HVAC (XGB): {mae:.2f}°C') # Mean absolute error from target indoor temp with recommended HVAC mae = np.mean(np.abs(indoor_temp_causadb - target_indoor_temp)) print(f'Mean absolute error with recommended HVAC (CausaDB): {mae:.2f}°C')   Mean absolute error in original data (Human): 1.72°C Mean absolute error with recommended HVAC (XGB): 2.46°C Mean absolute error with recommended HVAC (CausaDB): 0.20°C   We can use a simple volumetric model to calculate the energy wastage and cost of the two approaches. We can see that the CausaDB model saves energy and money compared to the XGBoost model.  cost_original, cost_original_daily, _ = calculate_wasted_heating_cost(data[&quot;indoor_temp&quot;], target_indoor_temp) cost_xgb, cost_xgb_daily, _ = calculate_wasted_heating_cost(indoor_temp_xgb, target_indoor_temp) cost_causadb, cost_causadb_daily, _ = calculate_wasted_heating_cost(indoor_temp_causadb, target_indoor_temp) print(f'Wasted heating cost in original data (Human): £{cost_original:.2f}') print(f'Wasted heating cost with recommended HVAC (XGB): £{cost_xgb:.2f}') print(f'Wasted heating cost with recommended HVAC (CausaDB): £{cost_causadb:.2f}') print(f'Cost reduction with CausaDB vs. XGB: £{cost_xgb - cost_causadb:.2f}') print(f'Percentage cost reduction with CausaDB vs. XGB: {100 * (cost_xgb - cost_causadb) / cost_xgb:.2f}%') print(f'Cost reduction with CausaDB vs. Human: £{cost_original - cost_causadb:.2f}') print(f'Percentage cost reduction with CausaDB vs. Human: {100 * (cost_original - cost_causadb) / cost_original:.2f}%')   Wasted heating cost in original data (Human): £352521.45 Wasted heating cost with recommended HVAC (XGB): £506169.30 Wasted heating cost with recommended HVAC (CausaDB): £40125.70 Cost reduction with CausaDB vs. XGB: £466043.59 Percentage cost reduction with CausaDB vs. XGB: 92.07% Cost reduction with CausaDB vs. Human: £312395.75 Percentage cost reduction with CausaDB vs. Human: 88.62%   ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Smart Building Energy Optimisation","url":"/docs/examples/use-cases/causadb_heating#conclusion","content":" This notebook is a short introduction to how CausaDB can be used in smart building energy management. We've built an accompanying Streamlit app to demonstrate how CausaDB can be used to optimise HVAC settings in real time in a deployed system. Check out the application code in the app.py file and test out the live app by visiting causadb-examples-smart-building.streamlit.app.  CausaDB is not just for HVAC systems. The same principles can be applied to a wide range of problems in domains as diverse as marketing, logistics, healthcare, and more. To find out more about CausaDB and to get in touch, visit our site at causa.tech. ","version":"Next","tagName":"h2"},{"title":"causadb","type":0,"sectionRef":"#","url":"/docs/reference/cli/causadb","content":"causadb Usage: $ causadb [OPTIONS] COMMAND [ARGS]... Options: -v, --version: Print the version of the CausaDB CLI--install-completion: Install completion for the current shell.--show-completion: Show completion for the current shell, to copy it or customize the installation.--help: Show this message and exit. Commands: account: Manage accountdata: Manage linked datasourcesmodels: Manage models","keywords":"","version":"Next"},{"title":"data list","type":0,"sectionRef":"#","url":"/docs/reference/cli/data_list","content":"data list List linked datasources. Usage: $ causadb data list [OPTIONS] Options: --help: Show this message and exit.","keywords":"","version":"Next"},{"title":"account setup","type":0,"sectionRef":"#","url":"/docs/reference/cli/account_setup","content":"account setup Set up a CausaDB account on this device Usage: $ causadb account setup [OPTIONS] Options: --help: Show this message and exit.","keywords":"","version":"Next"},{"title":"data","type":0,"sectionRef":"#","url":"/docs/reference/cli/data","content":"data Manage linked datasources Usage: $ causadb data [OPTIONS] COMMAND [ARGS]... Options: --help: Show this message and exit. Commands: add: Add a datasource.list: List linked datasources.remove: Remove a datasource.","keywords":"","version":"Next"},{"title":"models","type":0,"sectionRef":"#","url":"/docs/reference/cli/models","content":"models Manage models Usage: $ causadb models [OPTIONS] COMMAND [ARGS]... Options: --help: Show this message and exit. Commands: add: Create a model.attach: Attach data to a model.detach: Detach a datasource from a model.info: Show info about a model.list: List models.remove: Delete a model.status: Show status of a model.train: Train a model.","keywords":"","version":"Next"},{"title":"models add","type":0,"sectionRef":"#","url":"/docs/reference/cli/models_add","content":"models add Create a model. Usage: $ causadb models add [OPTIONS] Options: --model TEXT: The name of your model, used for accessing it later.--config TEXT: Path to a model config file (e.g. /path/to/config.json). See the docs for more information.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"data add","type":0,"sectionRef":"#","url":"/docs/reference/cli/data_add","content":"data add Add a datasource. Usage: $ causadb data add [OPTIONS] Options: --filepath TEXT: The path to your data file.--data TEXT: The name to give your new data source.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"data remove","type":0,"sectionRef":"#","url":"/docs/reference/cli/data_remove","content":"data remove Remove a datasource. Usage: $ causadb data remove [OPTIONS] Options: --data TEXT: Name of the data source you want to remove.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"models detach","type":0,"sectionRef":"#","url":"/docs/reference/cli/models_detach","content":"models detach Detach a datasource from a model. Usage: $ causadb models detach [OPTIONS] Options: --model TEXT: The name of the model you wish to detach data from.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"models attach","type":0,"sectionRef":"#","url":"/docs/reference/cli/models_attach","content":"models attach Attach data to a model. Usage: $ causadb models attach [OPTIONS] Options: --model TEXT: The name of the model you wish to attach data to.--data TEXT: The name of the data you wish to attach.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"models remove","type":0,"sectionRef":"#","url":"/docs/reference/cli/models_remove","content":"models remove Delete a model. Usage: $ causadb models remove [OPTIONS] Options: --model TEXT: The name of the model you wish to remove.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"models status","type":0,"sectionRef":"#","url":"/docs/reference/cli/models_status","content":"models status Show status of a model. Usage: $ causadb models status [OPTIONS] Options: --model TEXT: The name of the model you wish to retrieve status for.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"models list","type":0,"sectionRef":"#","url":"/docs/reference/cli/models_list","content":"models list List models. Usage: $ causadb models list [OPTIONS] Options: --help: Show this message and exit.","keywords":"","version":"Next"},{"title":"models info","type":0,"sectionRef":"#","url":"/docs/reference/cli/models_info","content":"models info Show info about a model. Usage: $ causadb models info [OPTIONS] Options: --model TEXT: The name of the model you wish to retrieve information about.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"addData","type":0,"sectionRef":"#","url":"/docs/reference/node/CausaDB/addData","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"addData","url":"/docs/reference/node/CausaDB/addData#parameters","content":" Name\tType\tDescriptiondataName\tstring\tThe name of the data.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"addData","url":"/docs/reference/node/CausaDB/addData#returns","content":" Data  The data object.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const data = client.addData('test-data'); await data.fromCSV('path/to/data.csv');    ","version":"Next","tagName":"h2"},{"title":"models train","type":0,"sectionRef":"#","url":"/docs/reference/cli/models_train","content":"models train Train a model. Usage: $ causadb models train [OPTIONS] Options: --model TEXT: The name of the model you wish to train.--help: Show this message and exit.","keywords":"","version":"Next"},{"title":"createModel","type":0,"sectionRef":"#","url":"/docs/reference/node/CausaDB/createModel","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"createModel","url":"/docs/reference/node/CausaDB/createModel#parameters","content":" Name\tType\tDescriptionmodelName\tstring\tThe name of the model.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"createModel","url":"/docs/reference/node/CausaDB/createModel#returns","content":" Promise&lt;Model&gt;  The model object.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const model = await client.createModel('test-model');    ","version":"Next","tagName":"h2"},{"title":"getData","type":0,"sectionRef":"#","url":"/docs/reference/node/CausaDB/getData","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"getData","url":"/docs/reference/node/CausaDB/getData#parameters","content":" Name\tType\tDescriptiondataName\tstring\tThe name of the data.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"getData","url":"/docs/reference/node/CausaDB/getData#returns","content":" Promise&lt;Data&gt;  The data object.  Throws  If the data is not found.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const data = await client.getData('test-data');    ","version":"Next","tagName":"h2"},{"title":"listData","type":0,"sectionRef":"#","url":"/docs/reference/node/CausaDB/listData","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"listData","url":"/docs/reference/node/CausaDB/listData#returns","content":" Promise&lt;Data[]&gt;  A list of data objects.  Throws  If there is a server error.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const dataList = await client.listData();    ","version":"Next","tagName":"h2"},{"title":"fromCSV","type":0,"sectionRef":"#","url":"/docs/reference/node/Data/fromCSV","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"fromCSV","url":"/docs/reference/node/Data/fromCSV#parameters","content":" Name\tType\tDescriptionfilepath\tstring\tThe path to the CSV file.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"fromCSV","url":"/docs/reference/node/Data/fromCSV#returns","content":" Promise&lt;void&gt;  Promise that resolves when the data has been added.  Throws  If pushing data to the server fails.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const data = new Data('test-data', client); await data.fromCSV('path/to/data.csv');    ","version":"Next","tagName":"h2"},{"title":"getModel","type":0,"sectionRef":"#","url":"/docs/reference/node/CausaDB/getModel","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"getModel","url":"/docs/reference/node/CausaDB/getModel#parameters","content":" Name\tType\tDescriptionmodelName\tstring\tThe name of the model.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"getModel","url":"/docs/reference/node/CausaDB/getModel#returns","content":" Promise&lt;Model&gt;  The model object.  Throws  If the model is not found.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const model = await client.getModel('test-model');    ","version":"Next","tagName":"h2"},{"title":"fromJSON","type":0,"sectionRef":"#","url":"/docs/reference/node/Data/fromJSON","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"fromJSON","url":"/docs/reference/node/Data/fromJSON#parameters","content":" Name\tType\tDescriptiondata\tany\tThe JSON object representing the data.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"fromJSON","url":"/docs/reference/node/Data/fromJSON#returns","content":" Promise&lt;void&gt;  Promise that resolves when the data has been added.  Throws  If pushing data to the server fails.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const data = new Data('test-data', client); await data.fromJSON({ &quot;column1&quot;: [1, 2, 3], &quot;column2&quot;: [4, 5, 6] });    ","version":"Next","tagName":"h2"},{"title":"listModels","type":0,"sectionRef":"#","url":"/docs/reference/node/CausaDB/listModels","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"listModels","url":"/docs/reference/node/CausaDB/listModels#returns","content":" Promise&lt;Model[]&gt;  A list of model objects.  Throws  If there is a server error.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const models = await client.listModels();    ","version":"Next","tagName":"h2"},{"title":"setToken","type":0,"sectionRef":"#","url":"/docs/reference/node/CausaDB/setToken","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"setToken","url":"/docs/reference/node/CausaDB/setToken#parameters","content":" Name\tType\tDescriptiontokenSecret\tstring\tToken secret provided by CausaDB.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"setToken","url":"/docs/reference/node/CausaDB/setToken#returns","content":" Promise&lt;boolean&gt;  True if the token is valid, False otherwise.  Throws  If the token is invalid.  Example  const client = new CausaDB(); const valid = await client.setToken('test-token-secret');  ","version":"Next","tagName":"h2"},{"title":"remove","type":0,"sectionRef":"#","url":"/docs/reference/node/Data/remove","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"remove","url":"/docs/reference/node/Data/remove#returns","content":" Promise&lt;void&gt;  Example  const data = client.getData('test-data'); await data.remove();  ","version":"Next","tagName":"h2"},{"title":"push","type":0,"sectionRef":"#","url":"/docs/reference/node/Data/push","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"push","url":"/docs/reference/node/Data/push#parameters","content":" Name\tType\tDescriptiondata\tany\tThe new data.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"push","url":"/docs/reference/node/Data/push#returns","content":" Promise&lt;void&gt;  Promise that resolves when the data has been added.  Throws  If the server request fails.   ","version":"Next","tagName":"h2"},{"title":"causalEffects","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/causalEffects","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"causalEffects","url":"/docs/reference/node/Model/causalEffects#parameters","content":" Name\tType\tDefault value\tDescriptionactions\tany\tundefined\tA dictionary representing the actions to simulate. fixed\tObject\t{}\tA dictionary representing fixed nodes, if any. interval\tnumber\t0.9\tThe interval at which to simulate the action. observationNoise\tboolean\tfalse\tWhether to include observation noise.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"causalEffects","url":"/docs/reference/node/Model/causalEffects#returns","content":" Promise&lt;any&gt;  A Promise resolving to the causal effects of the actions, including median, lower, and upper outcome estimates.  Throws  If the server request fails or returns an unexpected status code.  Example  const model = await client.getModel('test-model'); const causalEffects = await model.causalEffects({ 'x': [0, 1] }); console.log(causalEffects);    ","version":"Next","tagName":"h2"},{"title":"create","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/create","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"create","url":"/docs/reference/node/Model/create#parameters","content":" Name\tType\tDescriptionmodelName\tstring\tThe name of the model to create. client\tCausaDB\tA CausaDB client.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"create","url":"/docs/reference/node/Model/create#returns","content":" Promise&lt;Model&gt;  The current state of the model.  Throws  If the request fails or the model does not exist.  Example  const client = new CausaDB(); await client.setToken('test-token-secret'); const model = await Model.create('test-model', client);  ","version":"Next","tagName":"h2"},{"title":"detach","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/detach","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"detach","url":"/docs/reference/node/Model/detach#parameters","content":" Name\tType\tDescriptiondataName\tstring\tThe name of the data to detach.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"detach","url":"/docs/reference/node/Model/detach#returns","content":" Promise&lt;void&gt;  Promise that resolves when the data has been detached.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); await model.detach('test-data');    ","version":"Next","tagName":"h2"},{"title":"attach","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/attach","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"attach","url":"/docs/reference/node/Model/attach#parameters","content":" Name\tType\tDescriptiondataName\tstring\tThe name of the data to attach.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"attach","url":"/docs/reference/node/Model/attach#returns","content":" Promise&lt;void&gt;  Promise that resolves when the data has been attached.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); await model.attach('test-data');    ","version":"Next","tagName":"h2"},{"title":"causalAttributions","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/causalAttributions","content":"","keywords":"","version":"Next"},{"title":"getEdges","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/getEdges","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"getEdges","url":"/docs/reference/node/Model/getEdges#returns","content":" Promise&lt;[string, string][]&gt;  A list of tuples representing edges between nodes.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); const edges = await model.getEdges();    ","version":"Next","tagName":"h2"},{"title":"getNodeTypes","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/getNodeTypes","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"causalAttributions","url":"/docs/reference/node/Model/causalAttributions#parameters","content":" Name\tType\tDefault value\tDescriptionoutcome\tstring\tundefined\tThe name of the outcome node. normalise\tboolean\tfalse\tWhether to normalize the causal attributions.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"causalAttributions","url":"/docs/reference/node/Model/causalAttributions#returns","content":" Promise&lt;any&gt;  A Promise resolving to the causal attributions for the specified outcome.  Throws  If the server request fails or returns an unexpected status code.  Example  const model = await client.getModel('test-model'); const attributions = await model.causalAttributions('x'); console.log(attributions);    ","version":"Next","tagName":"h2"},{"title":"getNodes","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/getNodes","content":"","keywords":"","version":"Next"},{"title":"findBestActions","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/findBestActions","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"findBestActions","url":"/docs/reference/node/Model/findBestActions#parameters","content":" Name\tType\tDescriptiontargets\tany\tA dictionary of target outcomes to achieve. actionable\tstring[]\tA list of actionable node names. fixed\tObject\tA dictionary of fixed nodes, if any. constraints\tObject\tConstraints on the actions, if any. data?\tany\tThe data to use for the simulation, if any. targetImportance\tObject\tImportance weights for the targets.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"findBestActions","url":"/docs/reference/node/Model/findBestActions#returns","content":" Promise&lt;any&gt;  A Promise resolving to the optimal actions.  Throws  If the server request fails or returns an unexpected status code.  Example  const model = await client.getModel('test-model'); const bestActions = await model.findBestActions( { 'y': 0.5 }, // Targets ['x'], // Actionable nodes { 'z': 0.5 }, // Fixed nodes { 'x': [0, 1] } // Constraints ); console.log(bestActions);    ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"getNodes","url":"/docs/reference/node/Model/getNodes#returns","content":" Promise&lt;string[]&gt;  A list of node names.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); const nodes = await model.getNodes();    ","version":"Next","tagName":"h2"},{"title":"pull","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/pull","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"pull","url":"/docs/reference/node/Model/pull#returns","content":" Promise&lt;void&gt;   ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"getNodeTypes","url":"/docs/reference/node/Model/getNodeTypes#returns","content":" Promise&lt;any&gt;  A dictionary of node types.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); const nodeTypes = await model.getNodeTypes();    ","version":"Next","tagName":"h2"},{"title":"push","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/push","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"push","url":"/docs/reference/node/Model/push#returns","content":" Promise&lt;void&gt;  Promise that resolves when the configuration has been pushed.  Throws  If the server request fails.   ","version":"Next","tagName":"h2"},{"title":"remove","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/remove","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"remove","url":"/docs/reference/node/Model/remove#returns","content":" Promise&lt;void&gt;  Promise that resolves when the model has been removed.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); await model.remove();    ","version":"Next","tagName":"h2"},{"title":"setNodes","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/setNodes","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"setNodes","url":"/docs/reference/node/Model/setNodes#parameters","content":" Name\tType\tDescriptionnodes\tstring[]\tA list of node names.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"setNodes","url":"/docs/reference/node/Model/setNodes#returns","content":" Promise&lt;void&gt;  Promise that resolves when the nodes have been set.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); await model.setNodes(['x', 'y', 'z']);    ","version":"Next","tagName":"h2"},{"title":"setNodeTypes","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/setNodeTypes","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"setNodeTypes","url":"/docs/reference/node/Model/setNodeTypes#parameters","content":" Name\tType\tDescriptionnodeTypes\tany\tA dictionary of node types.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"setNodeTypes","url":"/docs/reference/node/Model/setNodeTypes#returns","content":" Promise&lt;void&gt;  Promise that resolves when the node types have been set.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); await model.setNodeTypes({ 'x': 'continuous', 'y': 'categorical' });    ","version":"Next","tagName":"h2"},{"title":"status","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/status","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"status","url":"/docs/reference/node/Model/status#returns","content":" Promise&lt;string&gt;  The status of the model.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); const status = await model.status();    ","version":"Next","tagName":"h2"},{"title":"train","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/train","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"train","url":"/docs/reference/node/Model/train#parameters","content":" Name\tType\tDefault value\tDescriptionwait\tboolean\ttrue\tWhether to wait for the model to finish training. pollInterval\tnumber\t0.2\tThe interval at which to poll the server for the model status.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"train","url":"/docs/reference/node/Model/train#returns","content":" Promise&lt;void&gt;  Promise that resolves when the model has been trained.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); await model.train();    ","version":"Next","tagName":"h2"},{"title":"simulateActions","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/simulateActions","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"simulateActions","url":"/docs/reference/node/Model/simulateActions#parameters","content":" Name\tType\tDefault value\tDescriptionactions\tany\tundefined\tA dictionary representing the actions to simulate. fixed?\tObject\t{}\tA dictionary representing the fixed nodes. interval?\tnumber\t0.9\tThe interval at which to simulate the actions. observationNoise?\tboolean\tfalse\tWhether to include observation noise.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"simulateActions","url":"/docs/reference/node/Model/simulateActions#returns","content":" Promise&lt;any&gt;  Promise that resolves to the outcome of the simulated actions, including median, lower, and upper estimates.  Throws  If the server request fails or returns an unexpected status code.  Example  const model = await client.getModel('test-model'); const outcome = await model.simulateActions({ 'x': [0, 1] }); console.log(outcome);    ","version":"Next","tagName":"h2"},{"title":"causadb","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/Constructor","content":"causadb class CausaDB() CausaDB client class to interact with the CausaDB system. Constructor def __init__(token: str = None, custom_url: str = None) -&gt; None Initializes the CausaDB client. Arguments: custom_url str, optional - The URL of the CausaDB server. For custom deployments or development purposes. Defaults to None.","keywords":"","version":"Next"},{"title":"setEdges","type":0,"sectionRef":"#","url":"/docs/reference/node/Model/setEdges","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"setEdges","url":"/docs/reference/node/Model/setEdges#parameters","content":" Name\tType\tDescriptionedges\t[string, string][]\tA list of tuples representing edges between nodes.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"setEdges","url":"/docs/reference/node/Model/setEdges#returns","content":" Promise&lt;void&gt;  Promise that resolves when the edges have been set.  Throws  If the server request fails.  Example  const model = await client.getModel('test-model'); await model.setEdges([['x', 'y'], ['y', 'z']]);    ","version":"Next","tagName":"h2"},{"title":"Add Data","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/add_data","content":"Add Data @validate_call def add_data(data_name: str) -&gt; Data Add data to the CausaDB system. Arguments: data_name str - The name of the data. Returns: Data - The data object.","keywords":"","version":"Next"},{"title":"Get Model","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/get_model","content":"Get Model @validate_call def get_model(model_name: str) -&gt; Model Get a model by name. Arguments: model_name str - The name of the model. Returns: Model - The model object.","keywords":"","version":"Next"},{"title":"List Data","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/list_data","content":"List Data def list_data() -&gt; list[Data] List all data. Returns: list[Data] - A list of data objects. model","keywords":"","version":"Next"},{"title":"Get Data","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/get_data","content":"Get Data @validate_call def get_data(data_name: str) -&gt; Data Get a data by name. Arguments: data_name str - The name of the data. Returns: Data - The data object.","keywords":"","version":"Next"},{"title":"Create Model","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/create_model","content":"Create Model @validate_call def create_model(model_name: str) -&gt; Model Create a model and add it to the CausaDB system. Arguments: model_name str - The name of the model. Returns: Model - The model object.","keywords":"","version":"Next"},{"title":"Set Token","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/set_token","content":"Set Token @validate_call def set_token(token: str) -&gt; None Set the token for the CausaDB client. Arguments: token str - Token secret provided by CausaDB. Raises: Exception - If the token is invalid.","keywords":"","version":"Next"},{"title":"List Models","type":0,"sectionRef":"#","url":"/docs/reference/python/CausaDB/list_models","content":"List Models @validate_call def list_models() -&gt; list[Model] List all models. Returns: list[Model] - A list of model objects.","keywords":"","version":"Next"},{"title":"From Pandas","type":0,"sectionRef":"#","url":"/docs/reference/python/Data/from_pandas","content":"From Pandas def from_pandas(dataframe: pd.DataFrame) -&gt; None Add data from a pandas DataFrame. Arguments: dataframe pd.DataFrame - The pandas DataFrame.","keywords":"","version":"Next"},{"title":"From CSV","type":0,"sectionRef":"#","url":"/docs/reference/python/Data/from_csv","content":"From CSV def from_csv(filepath: str) -&gt; None Add data from a CSV file. Arguments: filepath str - The path to the CSV file.","keywords":"","version":"Next"},{"title":"Constructor","type":0,"sectionRef":"#","url":"/docs/reference/python/Data/Constructor","content":"class Data() Constructor def __init__(data_name: str, client: &quot;CausaDB&quot;) -&gt; None Initializes the Data class. Arguments: data_name str - The name of the data.client CausaDB - A CausaDB client.","keywords":"","version":"Next"},{"title":"From Dict","type":0,"sectionRef":"#","url":"/docs/reference/python/Data/from_dict","content":"From Dict def from_dict(data: dict) -&gt; None Add data from a dictionary. Arguments: data dict - The data dictionary.","keywords":"","version":"Next"},{"title":"Remove","type":0,"sectionRef":"#","url":"/docs/reference/python/Data/remove","content":"Remove def remove() -&gt; None Remove the data from the CausaDB system.","keywords":"","version":"Next"},{"title":"Causal Effects","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/causal_effects","content":"Causal Effects @validate_call def causal_effects(actions: Union[str, dict[str, tuple[float, float]]], fixed: dict[str, float] = None, interval: float = 0.90, observation_noise=False) -&gt; pd.DataFrame Get the causal effects of actions on the model. Arguments: actions Union[str, dict[str, tuple[np.ndarray, np.ndarray]]] - A dictionary representing the actions.fixed dict - A dictionary representing the fixed nodes.interval float - The interval at which to simulate the action.observation_noise bool - Whether to include observation noise. Returns: pd.DataFrame - A dataframe representing the causal effects of the actions. Example: model.causal_effects( ... {&quot;x&quot;: [0, 1]} ... )","keywords":"","version":"Next"},{"title":"Attach","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/attach","content":"Attach @validate_call def attach(data_name: str) -&gt; None Attach data to the model. Arguments: data_name str - The name of the data to attach.","keywords":"","version":"Next"},{"title":"Causal Attributions","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/causal_attributions","content":"Causal Attributions @validate_call def causal_attributions(outcome: str, normalise: bool = False) -&gt; pd.DataFrame Get the causal attributions for an outcome. Arguments: outcome str - The outcome node.normalise bool - Whether to normalise the causal attributions. Returns: pd.DataFrame - A dataframe representing the causal attributions of the outcome. Example: model.causal_attributions(&quot;y&quot;) data","keywords":"","version":"Next"},{"title":"Constructor","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/Constructor","content":"class Model() Constructor def __init__(model_name: str, client: &quot;CausaDB&quot;) -&gt; None Initializes the Model class. Arguments: model_name str - The name of the model.client CausaDB - A CausaDB client.","keywords":"","version":"Next"},{"title":"Detach","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/detach","content":"Detach @validate_call def detach(data_name: str) -&gt; None Detach data from the model. Arguments: data_name str - The name of the data to detach.","keywords":"","version":"Next"},{"title":"Find Best Actions","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/find_best_actions","content":"Find Best Actions def find_best_actions( targets: dict[str, float], actionable: list[str], fixed: dict[str, list[float]] = \\{\\}, constraints: dict[str, tuple] = \\{\\}, data: pd.DataFrame = None, target_importance: dict[str, float] = \\{\\}) -&gt; pd.DataFrame Get the optimal actions for a given set of target outcomes. Arguments: targets dict[str, float] - A dictionary representing the target outcomes.actionable list[str] - A list of actionable nodes.fixed dict[str, float] - A dictionary representing the fixed nodes.constraints dict[str, tuple] - A dictionary representing the constraints.data pd.DataFrame - A dataframe representing the data.target_importance dict[str, float] - A dictionary representing the target importance. Returns: dict - A dictionary representing the optimal actions. Example: model.optimal_actions( ... {&quot;x&quot;: 0.5}, ... [&quot;x&quot;], ... {&quot;y&quot;: 0.5}","keywords":"","version":"Next"},{"title":"Get Node Types","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/get_node_types","content":"Get Node Types @validate_call def get_node_types() -&gt; dict Get the node types of the model. Returns: dict - A dictionary of node types.","keywords":"","version":"Next"},{"title":"Get Edges","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/get_edges","content":"Get Edges def get_edges() -&gt; list[tuple[str, str]] Get the edges of the model. Returns: list[tuple[str, str]]: A list of tuples representing edges.","keywords":"","version":"Next"},{"title":"Get Nodes","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/get_nodes","content":"Get Nodes def get_nodes() -&gt; list[str] Get the nodes of the model. Returns: list[str] - A list of node names.","keywords":"","version":"Next"},{"title":"Remove","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/remove","content":"Remove def remove() -&gt; None Remove the model from the CausaDB system.","keywords":"","version":"Next"},{"title":"Set Node Types","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/set_node_types","content":"Set Node Types @validate_call def set_node_types(node_types: dict) -&gt; None Set the node types of the model. Arguments: node_types dict - A dictionary of node types. Example: model.set_node_types({ ... &quot;x1&quot;: {&quot;type&quot;: &quot;seasonal&quot;, &quot;min&quot;: 0, &quot;max&quot;: 1} ... })","keywords":"","version":"Next"},{"title":"Set Edges","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/set_edges","content":"Set Edges @validate_call def set_edges(edges: list[tuple[str, str]]) -&gt; None Set the edges of the model. Arguments: edges list[tuple[str, str]] - A list of tuples representing edges. Example: model.set_edges([ ... (&quot;SaturatedFatsInDiet&quot;, &quot;Weight&quot;), ... (&quot;Weight&quot;, &quot;BMI&quot;), ... ])","keywords":"","version":"Next"},{"title":"Set Nodes","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/set_nodes","content":"Set Nodes @validate_call def set_nodes(nodes: list[str]) -&gt; None Set the nodes of the model. Arguments: nodes list[str] - A list of node names. Example: model.set_nodes([&quot;x&quot;, &quot;y&quot;, &quot;z&quot;])","keywords":"","version":"Next"},{"title":"Train","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/train","content":"Train @validate_call def train(data_name: str = None, wait: bool = True, poll_interval: float = 0.2, poll_limit: float = 30.0, verbose: bool = False, progress_interval: float = 1.0) -&gt; None Train the model. Arguments: wait bool - Whether to wait for the model to finish training.poll_interval float - The interval at which to poll the server for the model status.poll_limit float - The maximum time to wait for the model to finish training.verbose bool - Whether to display model progress.progress_interval float - The interval at which to display the model progress. Example: model.train()","keywords":"","version":"Next"},{"title":"Status","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/status","content":"Status def status() -&gt; str Get the status of the model. Returns: str - The status of the model.","keywords":"","version":"Next"},{"title":"Simulate Actions","type":0,"sectionRef":"#","url":"/docs/reference/python/Model/simulate_actions","content":"Simulate Actions @validate_call def simulate_actions(actions: dict, fixed: dict = \\{\\}, interval: float = 0.9, observation_noise: bool = False) -&gt; dict Simulate an action on the model. Arguments: actions dict - A dictionary representing the actions.fixed dict - A dictionary representing the fixed nodes.interval float - The interval at which to simulate the action.observation_noise bool - Whether to include observation noise. Returns: dict - A dictionary representing the result of the action. Example: model.simulate_actions( ... {&quot;x&quot;: [0, 1]} ... )","keywords":"","version":"Next"}],"options":{"id":"default"}}